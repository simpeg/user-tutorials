{"kind":"Notebook","sha256":"0723527a2cb504e0816f93c4070e2adda3825654707125aa2d6d24ec8284cab4","slug":"inv-dcr-3d","location":"/notebooks/05-dcr/inv_dcr_3d.ipynb","dependencies":[],"frontmatter":{"title":"3D DC Resistivity Inversion","content_includes_title":false,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Devin Cowan","given":"Devin","family":"Cowan"},"name":"Devin Cowan","affiliations":["University of British Columbia"],"id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Santiago Soler","given":"Santiago","family":"Soler"},"name":"Santiago Soler","affiliations":["University of British Columbia"],"id":"contributors-myst-generated-uid-1"}],"license":{"content":{"id":"CC-BY-4.0","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true,"url":"https://creativecommons.org/licenses/by/4.0/"},"code":{"id":"MIT","name":"MIT License","osi":true,"free":true,"url":"https://opensource.org/licenses/MIT"}},"github":"https://github.com/simpeg/user-tutorials","subject":"SimPEG User Tutorials","keywords":["geophysics","inversions","python","open-source"],"affiliations":[{"id":"University of British Columbia","name":"University of British Columbia"}],"exports":[{"format":"ipynb","filename":"inv_dcr_3d.ipynb","url":"/user-tutorials/build/inv_dcr_3d-e3ef530842d017312154d2e63f3a46d5.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"admonition","class":"caution","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Intermediate notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ifkYkMtvbv"}],"key":"bgxM1lww0z"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This tutorial focusses on intermediate level functionality within SimPEG. Basic functionality within SimPEG is not discussed in detail, as we assume the user is already familiar.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"y86MgDhFKv"}],"key":"kFTsiuskNm"}],"key":"EDsuGg3TIU"}],"key":"UPvebw32CU"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"admonition","class":"caution","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Medium-weight notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FlCVefDj7p"}],"key":"u0GB3m3scR"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Requires moderate computational resources. Run-times may exceed several minutes and require up to 8 GB of available RAM.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mdQR7sY8wA"}],"key":"I5gk8KjUTq"}],"key":"r8yIaAhX4t"}],"key":"ENH3RHlsLU"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Author:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iTKE0VQkBl"}],"key":"mW6PRKQS8u"},{"type":"text","value":" Devin C. Cowan","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HMi8y1Eno6"}],"key":"cXL4khCeCn"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Keywords:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ARgFnZNO7W"}],"key":"veEacOfYqR"},{"type":"text","value":" DC resistivity, 3D inversion, weighted least-squares, tree mesh.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"pVz1LlJ93y"}],"key":"Dx5Dp1qcmr"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Summary:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"tNCl5Dp1Gf"}],"key":"yr8EjdBCmW"},{"type":"text","value":" Here, DC resistivity data are inverted to recover a log-conductivity model using a weighted least-squares inversion approach. Most of the functionality required for this tutorial was presented in the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"RFy27dOHam"},{"type":"link","url":"/fwd-dcr-3d","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"3D Forward Simulation","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"xMJeNhUBt4"}],"urlSource":"fwd_dcr_3d.ipynb","dataUrl":"/fwd-dcr-3d.json","internal":true,"protocol":"file","key":"w15a1SCpyl"},{"type":"text","value":" and ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"M1WcYPJM1e"},{"type":"link","url":"/inv-dcr-2d","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"2.5D Inversion","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"fzHoCwfGtO"}],"urlSource":"inv_dcr_2d.ipynb","dataUrl":"/inv-dcr-2d.json","internal":true,"protocol":"file","key":"W8o0qpcOgY"},{"type":"text","value":" tutorials. We strongly urge the reader to work through the aforementioned tutorials prior to working through this one, as we will avoid significant repitition of content.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"x7E68eg2dB"}],"key":"sJS43KFuDZ"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"strong","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Learning Objectives:","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"fAEqEibOTC"}],"key":"yiPHvJzxZy"}],"key":"mvMPK8PB8J"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":15,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Demonstrate 3D DC resistivity inversion with SimPEG.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"iaEhVLmSPR"}],"key":"Mk2ULunVpd"},{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Discuss practical aspects of 3D DC resistivity inversion.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"ydkLXDrNtR"}],"key":"BZctq4Lexz"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"Analyzing inversion outputs.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"q9YeniWr8R"}],"key":"bLAJdwTQvm"}],"key":"yvqwtlQ0VV"}],"key":"vfY3Dqr4Zn"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import Modules","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jtO3fFpkux"}],"identifier":"import-modules","label":"Import Modules","html_id":"import-modules","implicit":true,"key":"eO8c02gia2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here, we import all of the functionality required to run the notebook for the tutorial exercise.\nAll of the functionality specific to DC resistivity is imported from ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xV0Ng4vfym"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/simpeg.electromagnetics.static.resistivity.html#module-simpeg.electromagnetics.static.resistivity","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg​.electromagnetics​.static​.resistivity","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PYx3nGhbLe"}],"urlSource":"myst:simpeg#simpeg.electromagnetics.static.resistivity","internal":false,"protocol":"xref:sphinx","key":"pHTSzuF7Kj"},{"type":"text","value":".\nWe also import some useful utility functions from ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uPKuzKEYGg"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/simpeg.utils.html#module-simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DBDielOdBf"}],"urlSource":"myst:simpeg#simpeg.utils","internal":false,"protocol":"xref:sphinx","key":"yGIl1J6eb8"},{"type":"text","value":". Classes required to define the data misfit, regularization, optimization, etc... are imported from elsewhere within SimPEG. We also import some useful utility functions from ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rf3jHyQFIN"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/simpeg.utils.html#module-simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HsWWo47cst"}],"urlSource":"myst:simpeg#simpeg.utils","internal":false,"protocol":"xref:sphinx","key":"ymeThOjaV1"},{"type":"text","value":". To generate the mesh used for the inversion, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NQcWWBliRm"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"discretize","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"azkwTtcwd7"}],"urlSource":"https://discretize.simpeg.xyz/en/main","key":"aSFthxvE53"},{"type":"text","value":" package.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BSrDtrtH7r"}],"key":"L1K3Y91S5Q"}],"key":"lpbKGRZ7Rj"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:26.426660Z","iopub.status.busy":"2024-07-17T17:57:26.426159Z","iopub.status.idle":"2024-07-17T17:57:28.963116Z","shell.execute_reply":"2024-07-17T17:57:28.962298Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# SimPEG functionality\nfrom simpeg.electromagnetics.static import resistivity as dc\nfrom simpeg.electromagnetics.static.utils.static_utils import (\n    plot_pseudosection,\n    apparent_resistivity_from_voltage,\n    geometric_factor,\n    convert_survey_3d_to_2d_lines,\n)\nfrom simpeg.utils.io_utils.io_utils_electromagnetics import read_dcip_xyz\nfrom simpeg.utils import download, model_builder\nfrom simpeg import (\n    maps,\n    data,\n    data_misfit,\n    regularization,\n    optimization,\n    inverse_problem,\n    inversion,\n    directives,\n)\n\ntry:\n    import plotly\n    from simpeg.electromagnetics.static.utils.static_utils import plot_3d_pseudosection\n    from IPython.core.display import display, HTML\n\n    has_plotly = True\nexcept ImportError:\n    has_plotly = False\n    pass\n\n# discretize functionality\nfrom discretize import TreeMesh\nfrom discretize.utils import mkvc, active_from_xyz\n\n# Basic Python functionality\nimport os\nimport tarfile\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm\n\nmpl.rcParams.update({\"font.size\": 16})","key":"FlC4Jpk6e1"},{"type":"output","id":"ZKMhZlBqNTTSZ3UhRLpN0","data":[],"key":"mNdZQyb4Cb"}],"key":"R0T72t1ZHr"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load Tutorial Data and Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"j7r68PI2YG"}],"identifier":"load-tutorial-data-and-plot","label":"Load Tutorial Data and Plot","html_id":"load-tutorial-data-and-plot","implicit":true,"key":"btYXIKB7s8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For most geophysical inversion projects, a reasonable inversion result can be obtained so long as the practitioner has observed data, the survey geometry and topography. For this tutorial, the observed data and topography files are provided. Here, we download and import the observed data and topography into the SimPEG framework.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PGSfLlyy5v"}],"key":"dXIEh7KlG6"}],"key":"YKy6tVWOYZ"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:28.967561Z","iopub.status.busy":"2024-07-17T17:57:28.967237Z","iopub.status.idle":"2024-07-17T17:57:29.495241Z","shell.execute_reply":"2024-07-17T17:57:29.493942Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# URL to download from repository assets\ndata_source = \"https://github.com/simpeg/user-tutorials/raw/main/assets/05-dcr/inv_dcr_3d_files.tar.gz\"\n\n# download the data\ndownloaded_data = download(data_source, overwrite=True)\n\n# unzip the tarfile\ntar = tarfile.open(downloaded_data, \"r\")\ntar.extractall()\ntar.close()\n\n# path to the directory containing our data\ndir_path = downloaded_data.split(\".\")[0] + os.path.sep\n\n# files to work with\ntopo_filename = dir_path + \"topo_xyz.txt\"\ndc_data_filename = dir_path + \"dc_data.xyz\"","key":"uCiq6wernW"},{"type":"output","id":"waGF1a_NNcTVc2CboMMB-","data":[{"name":"stdout","output_type":"stream","text":"Downloading https://github.com/simpeg/user-tutorials/raw/main/assets/05-dcr/inv_dcr_3d_files.tar.gz\n"},{"name":"stdout","output_type":"stream","text":"   saved to: /home/ssoler/git/user-tutorials/notebooks/05-dcr/inv_dcr_3d_files.tar.gz\nDownload completed!\n"}],"key":"aNEDv1gQQ7"}],"key":"DH3xB582Ab"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load the Topography","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"purSZAwJia"}],"identifier":"load-the-topography","label":"Load the Topography","html_id":"load-the-topography","implicit":true,"key":"Nzlk2fgJBE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Surface topography is defined as an (N, 3) ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yJhJ0HuchI"},{"type":"link","url":"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"numpy.ndarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mHniWo3ZtZ"}],"urlSource":"myst:numpy#numpy.ndarray","internal":false,"protocol":"xref:sphinx","key":"PZd6V1grUT"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cARSLPDMYi"}],"key":"cpbvOXGqcn"}],"key":"iF2wNkS6eU"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:29.500783Z","iopub.status.busy":"2024-07-17T17:57:29.500280Z","iopub.status.idle":"2024-07-17T17:57:29.517801Z","shell.execute_reply":"2024-07-17T17:57:29.516986Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"topo_xyz = np.loadtxt(str(topo_filename))","key":"B6sPopWIqV"},{"type":"output","id":"pN_uT6hdx-ci2TU2KaoMe","data":[],"key":"XRk44N9XAf"}],"key":"B1VUnDL0mh"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:29.521827Z","iopub.status.busy":"2024-07-17T17:57:29.521496Z","iopub.status.idle":"2024-07-17T17:57:30.243927Z","shell.execute_reply":"2024-07-17T17:57:30.243100Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(6, 6))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8], projection=\"3d\")\nax.set_zlim([-400, 400])\nax.scatter3D(topo_xyz[:, 0], topo_xyz[:, 1], topo_xyz[:, 2], s=0.25, c=\"b\")\nax.set_box_aspect(aspect=None, zoom=0.85)\nax.set_xlabel(\"X (m)\", labelpad=10)\nax.set_ylabel(\"Y (m)\", labelpad=10)\nax.set_zlabel(\"Z (m)\", labelpad=10)\nax.set_title(\"Topography (Exaggerated z-axis)\", fontsize=16, pad=-20)\nax.view_init(elev=45.0, azim=-125)","key":"J5kFgDODL0"},{"type":"output","id":"8O6xKqr1jQorTkIa9SfNK","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"b78add18804c4f85a3907093c2db80a9","path":"/user-tutorials/build/b78add18804c4f85a3907093c2db80a9.png"},"text/plain":{"content":"<Figure size 600x600 with 1 Axes>","content_type":"text/plain"}}}],"key":"gSpiZtcg2h"}],"key":"g5JQO6rqki"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load DC Resistivity Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bxq3kg0x22"}],"identifier":"load-dc-resistivity-data","label":"Load DC Resistivity Data","html_id":"load-dc-resistivity-data","implicit":true,"key":"hQmRhrDdHY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Option A: DCIP3D formatted data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yKyx0RlGdS"}],"key":"jae0UyxtW0"}],"key":"YB3OZcXkOA"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"A6rbuYWg4y"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.utils.io_utils.read_dcip3d_ubc.html#simpeg.utils.io_utils.read_dcip3d_ubc","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"read_dcip3d_ubc","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"XhuTgWnlRD"}],"urlSource":"myst:simpeg#simpeg.utils.io_utils.read_dcip3d_ubc","internal":false,"protocol":"xref:sphinx","key":"usbMSEkFXc"},{"type":"text","value":" utility function can be used to load DC/IP data stored in a UBC-GIF formatted file. This function outputs a SimPEG ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"eAwjeCTQS4"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.data.Data.html#simpeg.data.data","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Data","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vDFz5G3mbk"}],"urlSource":"myst:simpeg#simpeg.data.Data","internal":false,"protocol":"xref:sphinx","key":"E3VJUwFcg6"},{"type":"text","value":" object.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"T89IUd2ZmF"}],"key":"whM0hhv5cP"}],"key":"rzhvs9Q6dm"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Option B: Load XYZ formatted data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"imyk3ut5nX"}],"key":"sAfLAfxBWq"}],"key":"i1joqlSwF5"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For this tutorial, the observed data are organized within an XYZ formatted file. We can use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gSvahWFjKe"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.utils.io_utils.read_dcip_xyz.html#simpeg.utils.io_utils.read_dcip_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"read_dcip_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yQTnTBCYz6"}],"urlSource":"myst:simpeg#simpeg.utils.io_utils.read_dcip_xyz","internal":false,"protocol":"xref:sphinx","key":"Fp9D1Soh0O"},{"type":"text","value":" utility function to load data in this format. This function outputs a SimPEG ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uFf7qaotFq"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.data.Data.html#simpeg.data.data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Qt33fK65ud"}],"urlSource":"myst:simpeg#simpeg.data.Data","internal":false,"protocol":"xref:sphinx","key":"LlNJ4seAZe"},{"type":"text","value":" object. The data are normalized voltages in units V/A.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"g5yC04njoA"}],"key":"EqqG96Koxz"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vuAb8HZdL1"},{"type":"inlineCode","value":"dict_headers","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"w6Ix8YYz3u"},{"type":"text","value":" input argument can be used to import other data columns that are not required to define the SimPEG data object. In this case, we import a column that defines the survey line associated with each datum. We will use this to plot pseudosections for individual survey lines.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xfM6aANltN"}],"key":"INnauHNtWZ"}],"key":"kks6EyOWkl"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.251869Z","iopub.status.busy":"2024-07-17T17:57:30.251623Z","iopub.status.idle":"2024-07-17T17:57:30.294361Z","shell.execute_reply":"2024-07-17T17:57:30.293643Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dc_data, out_dict = read_dcip_xyz(\n    dc_data_filename,\n    \"volt\",\n    data_header=\"V/A\",\n    uncertainties_header=\"UNCERT\",\n    is_surface_data=False,\n    dict_headers=[\"LINEID\"],\n)","key":"iiS8JP34NY"},{"type":"output","id":"Q4p17jGwuLpI05EOl0IoS","data":[],"key":"d42KW3e0jj"}],"key":"qqMee39wW0"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Observed Data in 3D Pseudosection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AW4Bp994ES"}],"identifier":"plot-observed-data-in-3d-pseudosection","label":"Plot Observed Data in 3D Pseudosection","html_id":"plot-observed-data-in-3d-pseudosection","implicit":true,"key":"jFi0nuTmhO"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nUcJI1YMPv"},{"type":"link","url":"simpeg#simpeg.electromagnetics.static.utils.plot_3d_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"plot​_3d​_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aj8UomIv6X"}],"urlSource":"simpeg#simpeg.electromagnetics.static.utils.plot_3d_pseudosection","key":"wAfRC8TvMC"},{"type":"text","value":" utility function to represent the observed data in pseudosection. Although our original data are normalized voltages, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aQDdViWSgH"},{"type":"link","url":"simpeg#simpeg.electromagnetics.static.utils.apparent_resistivity_from_voltage","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"apparent​_resistivity​_from​_voltage","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eQrYM4myCz"}],"urlSource":"simpeg#simpeg.electromagnetics.static.utils.apparent_resistivity_from_voltage","key":"FxyZiTq0U8"},{"type":"text","value":" utility function to convert the data to apparent resistivities.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"emyVh8eeDZ"}],"key":"ajIdDPHdrA"}],"key":"uMq5ZtoWFU"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.297741Z","iopub.status.busy":"2024-07-17T17:57:30.297511Z","iopub.status.idle":"2024-07-17T17:57:30.306979Z","shell.execute_reply":"2024-07-17T17:57:30.306362Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"apparent_conductivities = 1 / apparent_resistivity_from_voltage(\n    dc_data.survey,\n    dc_data.dobs,\n)","key":"kMDMNk4Tvv"},{"type":"output","id":"rgZFPQQmSbveB53QRAxQl","data":[],"key":"zWW1ItfiqX"}],"key":"rpa8jr6UjZ"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.310807Z","iopub.status.busy":"2024-07-17T17:57:30.310537Z","iopub.status.idle":"2024-07-17T17:57:30.316134Z","shell.execute_reply":"2024-07-17T17:57:30.315492Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"if has_plotly:\n    fig = plot_3d_pseudosection(\n        dc_data.survey,\n        apparent_conductivities,\n        scale=\"log\",\n        units=\"S/m\",\n        marker_opts={\"colorscale\": \"RdYlBu_r\"},\n    )\n\n    fig.update_layout(\n        title_text=\"Apparent Conductivity\",\n        title_x=0.5,\n        title_font_size=24,\n        width=650,\n        height=500,\n        scene_camera=dict(\n            center=dict(x=0, y=0, z=-0.4), eye=dict(x=1.5, y=-1.5, z=1.8)\n        ),\n    )\n\n    #     plotly.io.show(fig)\n    html_str = plotly.io.to_html(fig)\n    display(HTML(html_str))\n\nelse:\n    print(\"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\")","key":"c3Hfd5m3vy"},{"type":"output","id":"4D3Lbx8jomRsof2yktA5P","data":[{"name":"stdout","output_type":"stream","text":"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\n"}],"key":"ed5CnGjGPe"}],"key":"XmZIpobfSE"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Observed Data in 2D Pseudosection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rmSCVi4rJs"}],"identifier":"plot-observed-data-in-2d-pseudosection","label":"Plot Observed Data in 2D Pseudosection","html_id":"plot-observed-data-in-2d-pseudosection","implicit":true,"key":"cTVhiu0wlk"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As demonstrated in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lUIIKKzYCX"},{"type":"link","url":"/fwd-dcr-3d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"3D Forward Simulation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aMS4VwLkhe"}],"urlSource":"fwd_dcr_3d.ipynb","dataUrl":"/fwd-dcr-3d.json","internal":true,"protocol":"file","key":"NwsnwmElyX"},{"type":"text","value":" tutorial, we can parse the 3D survey into a set of 2D survey lines if we know which survey line is associated with each datum. Then we can plot individual pseudosections for each survey line. We use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Sp3wcTSUHz"},{"type":"link","url":"simpeg#simpeg.electromagnetics.static.utils.convert_survey_3d_to_2d_lines","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"convert​_survey​_3d​_to​_2d​_lines","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tSiqM3PEhu"}],"urlSource":"simpeg#simpeg.electromagnetics.static.utils.convert_survey_3d_to_2d_lines","key":"VRLVHNPWkL"},{"type":"text","value":" to generate the list of 2D surveys. And we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RRpHDro6qw"},{"type":"link","url":"simpeg#simpeg.electromagnetics.static.utils.plot_2d_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"plot​_2d​_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MUaY911qWy"}],"urlSource":"simpeg#simpeg.electromagnetics.static.utils.plot_2d_pseudosection","key":"OIxNp8rMOB"},{"type":"text","value":" utility function to plot the pseudosection for the desired survey line.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"eumxsSKm2y"}],"key":"s8s5aVBnsT"}],"key":"pyHCRL1fMl"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.321265Z","iopub.status.busy":"2024-07-17T17:57:30.320975Z","iopub.status.idle":"2024-07-17T17:57:30.325238Z","shell.execute_reply":"2024-07-17T17:57:30.324538Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Extract line IDs and make sure they are integers\nlineID = np.array(out_dict[\"LINEID\"], dtype=int)","key":"n6QS9zel3d"},{"type":"output","id":"JFa-evssqvCsCtEPbYx9t","data":[],"key":"f9Xn5h7Mc1"}],"key":"IEIk3uXTBI"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.328299Z","iopub.status.busy":"2024-07-17T17:57:30.327838Z","iopub.status.idle":"2024-07-17T17:57:30.376233Z","shell.execute_reply":"2024-07-17T17:57:30.375491Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"survey_2d_list, index_list = convert_survey_3d_to_2d_lines(\n    dc_data.survey, lineID, data_type=\"volt\", output_indexing=True\n)","key":"ko4gHpJiiO"},{"type":"output","id":"V24QXagvp-KrjFPlv1Eqc","data":[],"key":"aYC4QgttnJ"}],"key":"BLM5H53mCT"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.379521Z","iopub.status.busy":"2024-07-17T17:57:30.379282Z","iopub.status.idle":"2024-07-17T17:57:30.383181Z","shell.execute_reply":"2024-07-17T17:57:30.382550Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dobs_2d_list = []\napparent_conductivities_2d = []\nfor ind in index_list:\n    dobs_2d_list.append(dc_data.dobs[ind])\n    apparent_conductivities_2d.append(apparent_conductivities[ind])","key":"LBy7znk7ip"},{"type":"output","id":"VLkmltLiSNrE9gjvUq4oV","data":[],"key":"jmLeNORZ4V"}],"key":"IZu2USG0C9"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.386904Z","iopub.status.busy":"2024-07-17T17:57:30.386605Z","iopub.status.idle":"2024-07-17T17:57:30.672876Z","shell.execute_reply":"2024-07-17T17:57:30.672083Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"line_index = 0\n\nfig = plt.figure(figsize=(8, 2.75))\nax1 = fig.add_axes([0.1, 0.15, 0.75, 0.78])\nplot_pseudosection(\n    survey_2d_list[line_index],\n    dobs=apparent_conductivities_2d[line_index],\n    plot_type=\"contourf\",\n    ax=ax1,\n    scale=\"log\",\n    cbar_label=\"S/m\",\n    mask_topography=True,\n    contourf_opts={\"levels\": 20, \"cmap\": mpl.cm.RdYlBu_r},\n)\nax1.set_title(\"Apparent Conductivity\")\nplt.show()","key":"FtMPMcED4r"},{"type":"output","id":"herP8cTTx7JjUp47GFu9k","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"43a86ffbffad3ecf9e8befbaa65925c4","path":"/user-tutorials/build/43a86ffbffad3ecf9e8befbaa65925c4.png"},"text/plain":{"content":"<Figure size 800x275 with 2 Axes>","content_type":"text/plain"}}}],"key":"XR1NoIiKVs"}],"key":"PFiYloUgdP"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Assign Uncertainties","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xH5MCU6wEf"}],"identifier":"assign-uncertainties","label":"Assign Uncertainties","html_id":"assign-uncertainties","implicit":true,"key":"gWVux1lepH"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Approaches for applying reasonable uncertainties to normalized voltage and apparent resistivity data were presented in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jOlIGEZkx8"},{"type":"link","url":"/inv-dcr-2d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"2.5D Inversion","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GxrUdrlHRS"}],"urlSource":"inv_dcr_2d.ipynb","dataUrl":"/inv-dcr-2d.json","internal":true,"protocol":"file","key":"wEq3oDnj0l"},{"type":"text","value":" tutorial. Here, we apply uncertainties of 1e-7 V/A + 10 % to the normalized voltage data being inverted.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XYWuxUhvih"}],"key":"C6rS8caipX"}],"key":"VdIQnjWPjN"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.678100Z","iopub.status.busy":"2024-07-17T17:57:30.677858Z","iopub.status.idle":"2024-07-17T17:57:30.682209Z","shell.execute_reply":"2024-07-17T17:57:30.681604Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dc_data.standard_deviation = 1e-7 + 0.1 * np.abs(dc_data.dobs)","key":"y1rXY7wMeQ"},{"type":"output","id":"51RGIThGw2D94QgfDD5pn","data":[],"key":"UF0x5PRlpn"}],"key":"jmSFR381sD"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Design a (Tree) Mesh","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QWQJMqixUp"}],"identifier":"design-a-tree-mesh","label":"Design a (Tree) Mesh","html_id":"design-a-tree-mesh","implicit":true,"key":"J7H668YhZc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Please visit the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PttoCVnyV9"},{"type":"link","url":"/fwd-dcr-2d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"2.5D Forward Simulation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YrMmtoTn65"}],"urlSource":"fwd_dcr_2d.ipynb","dataUrl":"/fwd-dcr-2d.json","internal":true,"protocol":"file","key":"QvDXVQ90Rk"},{"type":"text","value":" tutorial to see the best practices for mesh design. The same rules for defining appropriate meshes for 2.5D simulations and inversion apply to 3D simulations and inversion.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MdbqpUHpCy"}],"key":"yubJfRThWy"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Tutorial mesh:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ZizyBkCX44"}],"key":"H4fquyBLqS"},{"type":"text","value":" Here, a minimum cell width of 25 m (or 1/4 the minimum electrode spacing) is used within our survey region. The largest electrode spacing was 1000 m, so a the padding was extended at least 3000 m from the survey region. Using the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"b1TqTpMS4U"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.TreeMesh.refine_surface.html#discretize.treemesh.refine_surface","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"refine_surface","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GQ1FMbsdir"}],"urlSource":"myst:discretize#discretize.TreeMesh.refine_surface","internal":false,"protocol":"xref:sphinx","key":"RVBA3dzV9x"},{"type":"text","value":" method, we refine the tree mesh where there is significant topography. And using the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"l9q7NIGm9Q"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.TreeMesh.refine_points.html#discretize.treemesh.refine_points","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"refine_points","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RYdZF97OlO"}],"urlSource":"myst:discretize#discretize.TreeMesh.refine_points","internal":false,"protocol":"xref:sphinx","key":"uMbWEJONJB"},{"type":"text","value":" methods, we refine based on electrodes locations. Visit the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"BVA5HbSvOu"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.TreeMesh.html#discretize.treemesh","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"tree mesh","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"g2aP9ZVqeY"}],"urlSource":"myst:discretize#discretize.TreeMesh","internal":false,"protocol":"xref:sphinx","key":"FUxqMIU0TP"},{"type":"text","value":" API to see additional refinement methods.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hX3p0Jnrao"}],"key":"LutZKljbpa"}],"key":"sZXEcw2VLC"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:30.685066Z","iopub.status.busy":"2024-07-17T17:57:30.684830Z","iopub.status.idle":"2024-07-17T17:57:31.396912Z","shell.execute_reply":"2024-07-17T17:57:31.395781Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Defining domain size and minimum cell size\ndh = 25.0  # base cell width\ndom_width_x = 8000.0  # domain width x\ndom_width_y = 8000.0  # domain width y\ndom_width_z = 4000.0  # domain width z\n\n# Number of base mesh cells in each direction. Must be a power of 2\nnbcx = 2 ** int(np.round(np.log(dom_width_x / dh) / np.log(2.0)))  # num. base cells x\nnbcy = 2 ** int(np.round(np.log(dom_width_y / dh) / np.log(2.0)))  # num. base cells y\nnbcz = 2 ** int(np.round(np.log(dom_width_z / dh) / np.log(2.0)))  # num. base cells z\n\n# Define the base mesh\nhx = [(dh, nbcx)]\nhy = [(dh, nbcy)]\nhz = [(dh, nbcz)]\nmesh = TreeMesh([hx, hy, hz], x0=\"CCN\")\n\n# Shift top to maximum topography\nmesh.origin = mesh.origin + np.r_[0.0, 0.0, topo_xyz[:, -1].max()]\n\n# Mesh refinement based on surface topography\nk = np.sqrt(np.sum(topo_xyz[:, 0:2] ** 2, axis=1)) < 1200\nmesh.refine_surface(topo_xyz[k, :], padding_cells_by_level=[0, 4, 4], finalize=False)\n\n# Extract unique electrode locations.\nunique_locations = dc_data.survey.unique_electrode_locations\n\n# Mesh refinement near electrodes.\nmesh.refine_points(unique_locations, padding_cells_by_level=[6, 6, 4], finalize=False)\n\n# Finalize the mesh\nmesh.finalize()","key":"mzPCCHgsYN"},{"type":"output","id":"pGcGI7FzAhB8FxLrTFjaF","data":[],"key":"pGqykYI0nu"}],"key":"zoXlgrFyaQ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Active Cells","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VF3U2nEiOX"}],"identifier":"define-the-active-cells","label":"Define the Active Cells","html_id":"define-the-active-cells","implicit":true,"key":"ycG0s8U28M"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Simulated geophysical data are dependent on the subsurface distribution of physical property values. As a result, the cells lying below the surface topography are commonly referred to as ‘active cells’. And air cells, whose physical property values are fixed, are commonly referred to as ‘inactive cells’. Here, the discretize ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"txo67emBCU"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.utils.active_from_xyz.html#discretize.utils.active_from_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"active_from_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pqDbp2LKiC"}],"urlSource":"myst:discretize#discretize.utils.active_from_xyz","internal":false,"protocol":"xref:sphinx","key":"hzrh2JtkBT"},{"type":"text","value":" utility function is used to find the indices of the active cells using the mesh and surface topography. The output quantity is a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"olshuZNke1"},{"type":"inlineCode","value":"bool","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"khPUbl8PME"},{"type":"text","value":" array.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CKKK8Nxuok"}],"key":"PZJuWScDTY"}],"key":"ShjAKfNxFc"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:31.401339Z","iopub.status.busy":"2024-07-17T17:57:31.401073Z","iopub.status.idle":"2024-07-17T17:57:31.968371Z","shell.execute_reply":"2024-07-17T17:57:31.967494Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Indices of the active mesh cells from topography (e.g. cells below surface)\nactive_cells = active_from_xyz(mesh, topo_xyz)\n\n# number of active cells\nn_active = np.sum(active_cells)","key":"cpH023iIXV"},{"type":"output","id":"EK2sgyHYQ3hFqc7NDOib8","data":[],"key":"xQt4VumWJN"}],"key":"mCLf5fIv8g"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Project Electrodes to Discretized Topography","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"L96y0r9IkK"}],"identifier":"project-electrodes-to-discretized-topography","label":"Project Electrodes to Discretized Topography","html_id":"project-electrodes-to-discretized-topography","implicit":true,"key":"uhNBrQqqxM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Surface DC resistivity data will not be modeled accurately if the electrodes are modeled as living above or below the surface. It is especially problematic when electrodes are modeled as living in the air. Prior to inverting surface DC resistivity data, we must project the electrodes from their true elevation to the surface of the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VC3SKAieBB"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"discretized","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XvjX98R2a7"}],"key":"midk0xLae5"},{"type":"text","value":" topography. This is done using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tNSGqJ9R5R"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.electromagnetics.static.resistivity.Survey.drape_electrodes_on_topography.html#simpeg.electromagnetics.static.resistivity.survey.drape_electrodes_on_topography","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"drape​_electrodes​_on​_topography","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MxT9NyTxMi"}],"urlSource":"myst:simpeg#simpeg.electromagnetics.static.resistivity.Survey.drape_electrodes_on_topography","internal":false,"protocol":"xref:sphinx","key":"JkfpPww82i"},{"type":"text","value":" method.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OeWEHp9Sfo"}],"key":"Glr2lTaBVx"}],"key":"ZH6Sk4O5BX"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:31.973148Z","iopub.status.busy":"2024-07-17T17:57:31.972897Z","iopub.status.idle":"2024-07-17T17:57:32.006178Z","shell.execute_reply":"2024-07-17T17:57:32.005460Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dc_data.survey.drape_electrodes_on_topography(mesh, active_cells, option=\"top\")","key":"AKDO9x48Ys"},{"type":"output","id":"BFeYeiGkFMwFwtUdI_VZy","data":[],"key":"rtRPMgQAqs"}],"key":"krwYNwvd0R"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mapping from the Model to the Mesh","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sRRPTAkiBG"}],"identifier":"mapping-from-the-model-to-the-mesh","label":"Mapping from the Model to the Mesh","html_id":"mapping-from-the-model-to-the-mesh","implicit":true,"key":"vhcSQud02D"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here, the model defines the log-conductivity values for all active cells. We use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JmQdpduJCZ"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.maps.ExpMap.html#simpeg.maps.expmap","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg.maps.ExpMap","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Gkjteimytw"}],"urlSource":"myst:simpeg#simpeg.maps.ExpMap","internal":false,"protocol":"xref:sphinx","key":"LUOZn9rmgl"},{"type":"text","value":" to map from the model parameters to the conductivity values for all active cells. Then we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FaopcIvEBD"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.maps.InjectActiveCells.html#simpeg.maps.injectactivecells","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg​.maps​.InjectActiveCells","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"N9z3UQBD8g"}],"urlSource":"myst:simpeg#simpeg.maps.InjectActiveCells","internal":false,"protocol":"xref:sphinx","key":"O4aImNkW2x"},{"type":"text","value":" map to project the active cell resisitivities to the entire mesh. As explained in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uFL7Mmga1v"},{"type":"link","url":"/fwd-dcr-2d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"2.5D Forward Simulation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uahN49XbwU"}],"urlSource":"fwd_dcr_2d.ipynb","dataUrl":"/fwd-dcr-2d.json","internal":true,"protocol":"file","key":"GpWSKjM3Z2"},{"type":"text","value":" tutorial, air cells are given a fixed value of 1e-8 ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TDOpLR4esK"},{"type":"inlineMath","value":"S/m","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi mathvariant=\"normal\">/</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">S/m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">m</span></span></span></span>","key":"IDgJ0OKCij"},{"type":"text","value":" to ensure the forward problem is well-conditionned. And the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rlQWY4gnZV"},{"type":"inlineMath","value":"*","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo></mrow><annotation encoding=\"application/x-tex\">*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord\">∗</span></span></span></span>","key":"FzxCG8S7Ne"},{"type":"text","value":" operator is used to combine the separate mapping objects into a single mapping.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UYQoml7ATE"}],"key":"teLyWMw2vx"}],"key":"JMmc3iT3oj"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.011118Z","iopub.status.busy":"2024-07-17T17:57:32.010874Z","iopub.status.idle":"2024-07-17T17:57:32.017857Z","shell.execute_reply":"2024-07-17T17:57:32.017231Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Model parameters to all cells\nlog_conductivity_map = maps.InjectActiveCells(mesh, active_cells, 1e-8) * maps.ExpMap(\n    nP=n_active\n)","key":"lcPZgQc6EA"},{"type":"output","id":"AkRD_N6kIQ8lqYStyMCDM","data":[],"key":"VZ7TH96EyT"}],"key":"dPtnGW8OIX"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Starting/Reference Models","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iLOAPimhW5"}],"identifier":"starting-reference-models","label":"Starting/Reference Models","html_id":"starting-reference-models","implicit":true,"key":"CGJTiWmj2o"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wgXrnoX8sK"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"starting model","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p3b9IXjEgK"}],"key":"TtwGtmgkB3"},{"type":"text","value":" defines a reasonable starting point for the inversion and does not necessarily represent an initial estimate of the true model. It should be noted that the starting model ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QDbrAp7l0s"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"cannot be vector of zeros,","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RHFgoUVqWE"}],"key":"AWcjqBiONh"},{"type":"text","value":" otherwise the inversion will be unable to compute a gradient direction at the first iteration. For DC resistivity inversion, the starting model is frequently a halfspace estimated from the set of apparent resistivities/conductivities.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fR8oDqJswY"}],"key":"i7OA3MrTJI"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"S9kwBUycUY"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"reference model","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ObiAN5jxh6"}],"key":"GFnoRHODj4"},{"type":"text","value":" is used to include a-priori information. By default, the starting model is set as the reference model. The impact of the reference model on the inversion will be discussed in another tutorial.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PAmNUBND5H"}],"key":"Y9Dg2oufiB"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Notice that the length of the starting and reference models is equal to the number of model parameters!!!","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"HiNxmBeZtw"}],"key":"ju0lLf2DTs"}],"key":"Z1SiN0U9eA"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.021952Z","iopub.status.busy":"2024-07-17T17:57:32.021724Z","iopub.status.idle":"2024-07-17T17:57:32.026523Z","shell.execute_reply":"2024-07-17T17:57:32.025929Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Median apparent resistivity\nmedian_conductivity = np.median(apparent_conductivities)\n\n# Create starting model from log-conductivity\nstarting_conductivity_model = np.log(median_conductivity) * np.ones(n_active)\n\n# Zero reference conductivity model\nreference_conductivity_model = starting_conductivity_model.copy()","key":"fAdZuyOIPV"},{"type":"output","id":"elVCcAEyv-N9eIXfc3a5e","data":[],"key":"H3gmewOIUs"}],"key":"HQaENeyrsF"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Forward Simulation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SLJoT4pTGv"}],"identifier":"define-the-forward-simulation","label":"Define the Forward Simulation","html_id":"define-the-forward-simulation","implicit":true,"key":"ON5cD6WM7q"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A simulation object defining the forward problem is required in order to predict data and calculate misfits for recovered models. A comprehensive description of the simulation object for 3D DC resistivity was discussed in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ok0ySPCKQ7"},{"type":"link","url":"/fwd-dcr-2d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"3D Forward Simulation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GXaS3m6RId"}],"urlSource":"fwd_dcr_2d.ipynb","dataUrl":"/fwd-dcr-2d.json","internal":true,"protocol":"file","key":"o9ZfxVwRYi"},{"type":"text","value":" tutorial. Here, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nkwTcvRnys"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.electromagnetics.static.resistivity.Simulation3DNodal.html#simpeg.electromagnetics.static.resistivity.simulation3dnodal","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Simulation3DNodal","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zTYsERHPZv"}],"urlSource":"myst:simpeg#simpeg.electromagnetics.static.resistivity.Simulation3DNodal","internal":false,"protocol":"xref:sphinx","key":"pqlO3Ee1ml"},{"type":"text","value":" simulation which solves for the electric potential on mesh nodes.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AMg5oEBHqK"}],"key":"ZKzCCTves7"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Since our model consists of log-conductivities, we use ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"S2tUvXLjSj"},{"type":"inlineCode","value":"sigmaMap","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RTjELQNg4F"},{"type":"text","value":" to set the mapping from the model to the mesh cells. For reasonable cases, we can compute and store the Jacobian explicitly for 3D problems by setting ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tBR89WHU7C"},{"type":"inlineCode","value":"storeJ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"A16gtG9tsp"},{"type":"text","value":" to ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"juCo4JCbOY"},{"type":"inlineCode","value":"True","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yGr5XgaNaf"},{"type":"text","value":". By doing this, we drastically reduce the run-time of the inversion. For larger problems being run on computers with insufficient RAM, you may need to set ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fGtTPgV71C"},{"type":"inlineCode","value":"storeJ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"L7iJ4sLr61"},{"type":"text","value":" to ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GuB7Q3fnXv"},{"type":"inlineCode","value":"False","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RSmV0frI7s"},{"type":"text","value":" and invert the data without storing the sensitivities explicitly.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"CAbQ9vYG3j"}],"key":"tVMFPikE91"}],"key":"ao8nPZ1bOw"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.029837Z","iopub.status.busy":"2024-07-17T17:57:32.029608Z","iopub.status.idle":"2024-07-17T17:57:32.523040Z","shell.execute_reply":"2024-07-17T17:57:32.522300Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dc_simulation = dc.simulation.Simulation3DNodal(\n    mesh, survey=dc_data.survey, sigmaMap=log_conductivity_map, storeJ=True\n)","key":"ukxihAy4qD"},{"type":"output","id":"fSYabrB_kLzLpnXGjp8El","data":[],"key":"fAdo4CPaA8"}],"key":"ozuR8pwqJY"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Data Misfit","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AnZU8yMjzg"}],"identifier":"define-the-data-misfit","label":"Define the Data Misfit","html_id":"define-the-data-misfit","implicit":true,"key":"YZvBS18UMk"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"To understand the role of the data misfit in the inversion, please visit ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OfUePNbbnn"},{"type":"link","url":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/Uncertainties.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this online resource","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TNyKUA8OEt"}],"urlSource":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/Uncertainties.html","key":"MffXrZPbyD"},{"type":"text","value":".\nHere, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CLWMGSiit8"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.data_misfit.L2DataMisfit.html#simpeg.data_misfit.l2datamisfit","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"L2DataMisfit","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Kx8JSq9W6k"}],"urlSource":"myst:simpeg#simpeg.data_misfit.L2DataMisfit","internal":false,"protocol":"xref:sphinx","key":"Ost3wPowLf"},{"type":"text","value":" class to define the data misfit. In this case, the data misfit is the L2 norm of the weighted residual between the observed data and the data predicted for a given model. When instantiating the data misfit object within SimPEG, we must assign an appropriate ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qWftytokwN"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"data object","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zv3xGXJUik"}],"key":"q6dSxMNFCL"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xB6b71ufe0"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simulation object","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MQCVthDrQi"}],"key":"ZfnEYC7zw4"},{"type":"text","value":" as properties.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SPPYFx9Ea6"}],"key":"OahF6MXVB9"}],"key":"iZXhLHHW0l"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.527799Z","iopub.status.busy":"2024-07-17T17:57:32.527556Z","iopub.status.idle":"2024-07-17T17:57:32.531419Z","shell.execute_reply":"2024-07-17T17:57:32.530792Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dmis_L2 = data_misfit.L2DataMisfit(simulation=dc_simulation, data=dc_data)","key":"qS0wTsLw0G"},{"type":"output","id":"X6ste7MUKm7ORtrHUsuj1","data":[],"key":"oXk9wCpRDb"}],"key":"MrwkL1T2Zl"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Regularization","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mAjL9cxovq"}],"identifier":"define-the-regularization","label":"Define the Regularization","html_id":"define-the-regularization","implicit":true,"key":"lq9kkniJE8"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To understand the role of the regularization in the inversion, please visit ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ho0wZw2Qj1"},{"type":"link","url":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/ObjectiveFunction.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this online resource","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QDlwCP15Ns"}],"urlSource":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/ObjectiveFunction.html","key":"ho5NGBn2xV"},{"type":"text","value":". Here, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ySdCznQ6K2"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.regularization.WeightedLeastSquares.html#simpeg.regularization.weightedleastsquares","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"WeightedLeastSquares","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YIeKnXEcGe"}],"urlSource":"myst:simpeg#simpeg.regularization.WeightedLeastSquares","internal":false,"protocol":"xref:sphinx","key":"uClFPABUD7"},{"type":"text","value":" regularization class to constrain the inversion result. Length scales along x, y and z are used to balance the smallness and smoothness terms. And the reference model is only applied to the smallness term; which is redundant for the tutorial example since we have set the reference model to an array of zeros.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZLMX8Nhi1y"}],"key":"Z7NlQsTGYB"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By default, the regularization acts on the model parameters; which in the case are the log-conductivities of the active cells. So we need to specify which cells are active in the regularization. And if we wanted to apply the regularization to a function of the model parameters, we would need to set an approprate mapping object using the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QuuDy8Wbzy"},{"type":"inlineCode","value":"mapping","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"adtAaoEDf6"},{"type":"text","value":" keyword argument.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"G7qSusZeW4"}],"key":"zeQLncuzVc"}],"key":"PgVIi4SDby"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.535696Z","iopub.status.busy":"2024-07-17T17:57:32.535415Z","iopub.status.idle":"2024-07-17T17:57:32.964229Z","shell.execute_reply":"2024-07-17T17:57:32.963341Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"reg_L2 = regularization.WeightedLeastSquares(\n    mesh,\n    active_cells=active_cells,\n    length_scale_x=100.0,\n    length_scale_y=100.0,\n    length_scale_z=100.0,\n    reference_model=reference_conductivity_model,\n)","key":"OQXdtUPaAm"},{"type":"output","id":"0dkwt0Kw-7JgHqALeRnq6","data":[],"key":"tehw8kTeoC"}],"key":"u0hgl75Ldf"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Optimization Algorithm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h6npKiIqEn"}],"identifier":"define-the-optimization-algorithm","label":"Define the Optimization Algorithm","html_id":"define-the-optimization-algorithm","implicit":true,"key":"jiMduV1U2W"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vwhknUyMwr"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.optimization.InexactGaussNewton.html#simpeg.optimization.inexactgaussnewton","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"InexactGaussNewton","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tQl3FnljWV"}],"urlSource":"myst:simpeg#simpeg.optimization.InexactGaussNewton","internal":false,"protocol":"xref:sphinx","key":"SU7uY4LODF"},{"type":"text","value":" class to solve the optimization problem using the inexact Gauss Newton with conjugate gradient solver. Reasonable default values have generally been set for the properties of each optimization class. However, the user may choose to set custom values; e.g. the accuracy tolerance for the conjugate gradient solver or the number of line searches.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"b7NxMpsDBu"}],"key":"ggDMBZTtTa"}],"key":"HPwsp6CoTa"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.969333Z","iopub.status.busy":"2024-07-17T17:57:32.969089Z","iopub.status.idle":"2024-07-17T17:57:32.972953Z","shell.execute_reply":"2024-07-17T17:57:32.972189Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"opt_L2 = optimization.InexactGaussNewton(\n    maxIter=40, maxIterLS=20, maxIterCG=30, tolCG=1e-3\n)","key":"Jqz5bujmJf"},{"type":"output","id":"2JzBoqz2K7E2kDWsWCyn5","data":[],"key":"StQmb3Uhts"}],"key":"Zcg2YumRiK"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Inverse Problem","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rUkzWUdrBk"}],"identifier":"define-the-inverse-problem","label":"Define the Inverse Problem","html_id":"define-the-inverse-problem","implicit":true,"key":"f5ThGWreMo"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IYykaEKxOx"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.inverse_problem.BaseInvProblem.html#simpeg.inverse_problem.baseinvproblem","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"BaseInvProblem","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jijXfkzYLt"}],"urlSource":"myst:simpeg#simpeg.inverse_problem.BaseInvProblem","internal":false,"protocol":"xref:sphinx","key":"CnCpmnPDbZ"},{"type":"text","value":" class to fully define the inverse problem that is solved at each beta (trade-off parameter) iteration. The inverse problem requires appropriate ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SyvBjmSdI7"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"data misfit","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"TWX75YfIu9"}],"key":"MxVdCkaYeF"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"g2XC6mIndk"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"regularization","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mjWBnufhtW"}],"key":"db1gkjyMTf"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mCwuM42R2M"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"optimization","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nmuaIL8066"}],"key":"SKP1pOo3jn"},{"type":"text","value":" objects.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nEykI2LnAY"}],"key":"FUrSSN19oO"}],"key":"ePAoXpix0R"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.977607Z","iopub.status.busy":"2024-07-17T17:57:32.977378Z","iopub.status.idle":"2024-07-17T17:57:32.981557Z","shell.execute_reply":"2024-07-17T17:57:32.980735Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"inv_prob_L2 = inverse_problem.BaseInvProblem(dmis_L2, reg_L2, opt_L2)","key":"EV8MR98k93"},{"type":"output","id":"5DJvi7Ov2gsPteQGkZEgR","data":[],"key":"umuXmx80Zo"}],"key":"DKoIWtMq7I"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Provide Inversion Directives","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Whhv6g7WYW"}],"identifier":"provide-inversion-directives","label":"Provide Inversion Directives","html_id":"provide-inversion-directives","implicit":true,"key":"U9cp2744Mo"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Directives represent operations that are carried out during the inversion. Here, we apply common directives for weighted least-squares inversion of DC resistivity data and describe their roles. These are:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZMuIhYW2JJ"}],"key":"dSbbZIt9fI"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.UpdateSensitivityWeights.html#simpeg.directives.updatesensitivityweights","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"UpdateSensitivityWeights","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uQcpcXOLoM"}],"urlSource":"myst:simpeg#simpeg.directives.UpdateSensitivityWeights","internal":false,"protocol":"xref:sphinx","key":"DbMNzfrGiH"},{"type":"text","value":": apply sensitivity weighting to counteract the natural tendency of DC resistivity inversion to place materials near the electrodes. Since the problem is non-linear and the sensitivities are updated with every model, we set ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"rCO22VhlAC"},{"type":"inlineCode","value":"every_iteration=True","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YmMWviXh2g"},{"type":"text","value":". For DC resistivity inversion, we do not want to use the entire dynamic range of the sensitivities to generate our weighting. So we generally set ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"QWUbANMyHC"},{"type":"inlineCode","value":"threshold_value","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VirXYIxoXb"},{"type":"text","value":" to a value betwewen 1e-4 and 1e-1. ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Xj28FlhbJ6"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Warning: should not be used if storeJ set to False in the simulation class","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"g0RgSPQI2g"}],"key":"vPic3cTJKo"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Npauu1yHsY"}],"key":"okCvidLBck"}],"key":"aIqhiGP84z"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.UpdatePreconditioner.html#simpeg.directives.updatepreconditioner","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"UpdatePreconditioner","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"zqIC7VTImI"}],"urlSource":"myst:simpeg#simpeg.directives.UpdatePreconditioner","internal":false,"protocol":"xref:sphinx","key":"Xd211zJtVb"},{"type":"text","value":": Apply Jacobi preconditioner when solving optimization problem to reduce the number of conjugate gradient iterations. We set ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ZrsbYzqQaL"},{"type":"inlineCode","value":"update_every_iteration=True","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"wQDeRlsC6t"},{"type":"text","value":" because the ideal preconditioner is model-dependent. ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"pN9GKC4YM1"},{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Warning: should not be used if storeJ set to False in the simulation class","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jbUNZ4ITO2"}],"key":"JCqcAl6YP7"},{"type":"text","value":".","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"vE2KlurQOt"}],"key":"oJQhgOBY87"}],"key":"rc26AKdqte"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.BetaEstimate_ByEig.html#simpeg.directives.betaestimate_byeig","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"BetaEstimate_ByEig","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Ci2zTzc5Gy"}],"urlSource":"myst:simpeg#simpeg.directives.BetaEstimate_ByEig","internal":false,"protocol":"xref:sphinx","key":"O0eCJSVVEq"},{"type":"text","value":": Compute and set starting trade-off parameter (beta) based on largest eigenvalues.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"uBtdwyz0Z8"}],"key":"GegBWR5sFJ"}],"key":"ZbgVsr2kwD"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.BetaSchedule.html#simpeg.directives.betaschedule","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"BetaSchedule","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"qBg5KH6HRo"}],"urlSource":"myst:simpeg#simpeg.directives.BetaSchedule","internal":false,"protocol":"xref:sphinx","key":"lpAdGvNXKf"},{"type":"text","value":": Size reduction of the trade-off parameter at every beta iteration, and the number of Gauss-Newton iterations for each beta. In general, a ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"CXfkBvZ1vQ"},{"type":"inlineCode","value":"coolingFactor","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"WY62U9Pdbh"},{"type":"text","value":" between 1.5 and 2.5, and ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"q0aqaUi4vU"},{"type":"inlineCode","value":"coolingRate","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"BpnA5WCWyU"},{"type":"text","value":" of 2 or 3 works well for DC resistivity inversion. Cooling beta too quickly will result in portions of the model getting trapped in local minima. And we will not be finding the solution that minimizes the optimization problem if the cooling rate is too small.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"vllitgRdz6"}],"key":"acLS2pEiaG"}],"key":"ZymTSqluIR"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.TargetMisfit.html#simpeg.directives.targetmisfit","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"TargetMisfit","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"UR65i1jEHI"}],"urlSource":"myst:simpeg#simpeg.directives.TargetMisfit","internal":false,"protocol":"xref:sphinx","key":"x1G7bqkKLQ"},{"type":"text","value":": Terminates the inversion when the data misfit equals the target misfit. A ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"WdZR5nH2Gg"},{"type":"inlineCode","value":"chifact=1","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"N8veBv6wx9"},{"type":"text","value":" terminates the inversion when the data misfit equals the number of data.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"rF3B8DFRou"}],"key":"gltXaKUCfG"}],"key":"f9x0vvJaaa"}],"key":"UIqCaq671r"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"The directive objects are organized in a ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"hr3TBtYh3a"},{"type":"inlineCode","value":"list","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"c4yp8Gcj4c"},{"type":"text","value":". Upon starting the inversion or updating the recovered model at each iteration, the inversion will call each directive within the list ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"epxQ7z1aeD"},{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"in order","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"RXZwBsF9dk"}],"key":"rbLBVA31qQ"},{"type":"text","value":". The order of the directives matters, and SimPEG will throw an error if directives are organized into an improper order. Some directives, like the ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"B1wVODnVjN"},{"type":"inlineCode","value":"BetaEstimate_ByEig","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"fycNOCgzsm"},{"type":"text","value":" are only used when starting the inversion. Other directives, like ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"bWaEdlF9y9"},{"type":"inlineCode","value":"UpdatePreconditionner","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"MFf4Y4NE7W"},{"type":"text","value":", are used whenever the model is updated.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"JDFK2fA2Sh"}],"key":"DMFVE6D6ld"}],"key":"I9T9LXSNx9"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.985004Z","iopub.status.busy":"2024-07-17T17:57:32.984712Z","iopub.status.idle":"2024-07-17T17:57:32.990671Z","shell.execute_reply":"2024-07-17T17:57:32.989983Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"if dc_simulation.storeJ:\n    sensitivity_weights = directives.UpdateSensitivityWeights(\n        every_iteration=True, threshold_value=1e-2\n    )\n    update_jacobi = directives.UpdatePreconditioner(update_every_iteration=True)\n    directives_list_L2 = [\n        sensitivity_weights,\n        update_jacobi,\n    ]\nelse:\n    directives_list_L2 = []\n\nstarting_beta = directives.BetaEstimate_ByEig(beta0_ratio=100)\nbeta_schedule = directives.BetaSchedule(coolingFactor=2.0, coolingRate=2)\ntarget_misfit = directives.TargetMisfit(chifact=1.0)\n\ndirectives_list_L2 += [starting_beta, beta_schedule, target_misfit]","key":"XKv5FlS1aq"},{"type":"output","id":"6NuZ8djrJRiCpAwLA75Gq","data":[],"key":"Dp02thcFcO"}],"key":"bEriq3KQ0b"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define and Run the Inversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JMPmF26z74"}],"identifier":"define-and-run-the-inversion","label":"Define and Run the Inversion","html_id":"define-and-run-the-inversion","implicit":true,"key":"AnULLY5sLU"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We define the inversion using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iq3IcpWwJ6"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.inversion.BaseInversion.html#simpeg.inversion.baseinversion","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"BaseInversion","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"esfwoh8Usy"}],"urlSource":"myst:simpeg#simpeg.inversion.BaseInversion","internal":false,"protocol":"xref:sphinx","key":"wlkova6fAk"},{"type":"text","value":" class. The inversion class must be instantiated with an appropriate ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GAplgGrIl8"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"inverse problem","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QNhI6JeZdU"}],"key":"gYwuVzZrGH"},{"type":"text","value":" object and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"c0DiCFDDjh"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"directives list","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"a2xAI7zsRn"}],"key":"QPRm0kdTmy"},{"type":"text","value":". The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rbaGIUFLe3"},{"type":"inlineCode","value":"run","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iI7fSUCYyW"},{"type":"text","value":" method, along with a starting model, is respondible for running the inversion. The output is a 1D numpy.ndarray containing the recovered model parameters","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MguCv9gwsg"}],"key":"IqnyjAuJpy"}],"key":"zuS3ZnRv6x"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T17:57:32.994525Z","iopub.status.busy":"2024-07-17T17:57:32.994197Z","iopub.status.idle":"2024-07-17T18:16:51.323911Z","shell.execute_reply":"2024-07-17T18:16:51.320171Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Here we combine the inverse problem and the set of directives\ninv_L2 = inversion.BaseInversion(inv_prob_L2, directives_list_L2)\n\n# Run the inversion\nrecovered_log_conductivity_model = inv_L2.run(starting_conductivity_model)","key":"BXUMJk5VhR"},{"type":"output","id":"45Ub5Wvw7m0Xer95cewZB","data":[{"name":"stdout","output_type":"stream","text":"\nRunning inversion with SimPEG v0.22.1\n\n                        simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.\n                        ***Done using same Solver, and solver_opts as the Simulation3DNodal problem***\n                        \n"},{"name":"stdout","output_type":"stream","text":"model has any nan: 0\n============================ Inexact Gauss Newton ============================\n  #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   \n-----------------------------------------------------------------------------\nx0 has any nan: 0\n"},{"name":"stdout","output_type":"stream","text":"   0  3.04e-06  1.22e+04  0.00e+00  1.22e+04    9.85e+02      0              \n"},{"name":"stderr","output_type":"stream","text":"/home/ssoler/mambaforge/envs/simpeg-user-tutorials/lib/python3.10/site-packages/simpeg/optimization.py:1072: UserWarning: tol is not a valid keyword for cg and will be ignored\n  Hinv = SolverICG(\n"},{"name":"stdout","output_type":"stream","text":"   1  3.04e-06  4.70e+03  4.20e+08  5.98e+03    9.60e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"   2  1.52e-06  4.71e+03  3.85e+08  5.30e+03    2.10e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   3  1.52e-06  3.75e+03  8.31e+08  5.01e+03    1.43e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"   4  7.61e-07  3.71e+03  8.46e+08  4.35e+03    1.82e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   5  7.61e-07  2.79e+03  1.68e+09  4.06e+03    1.46e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"   6  3.81e-07  2.74e+03  1.72e+09  3.39e+03    1.50e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   7  3.81e-07  1.99e+03  3.06e+09  3.16e+03    1.19e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"   8  1.90e-07  1.96e+03  3.12e+09  2.55e+03    1.14e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   9  1.90e-07  1.43e+03  5.05e+09  2.39e+03    8.52e+00      0              \n"},{"name":"stdout","output_type":"stream","text":"  10  9.51e-08  1.42e+03  5.11e+09  1.90e+03    8.23e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"  11  9.51e-08  1.04e+03  7.92e+09  1.79e+03    6.61e+00      0              \n"},{"name":"stdout","output_type":"stream","text":"  12  4.76e-08  1.03e+03  7.98e+09  1.41e+03    5.73e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"  13  4.76e-08  7.46e+02  1.21e+10  1.32e+03    5.65e+00      0              \n"},{"name":"stdout","output_type":"stream","text":"  14  2.38e-08  7.36e+02  1.22e+10  1.03e+03    3.83e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"------------------------- STOP! -------------------------\n1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 1.2236e+03\n1 : |xc-x_last| = 1.9808e+01 <= tolX*(1+|x0|) = 1.2210e+02\n0 : |proj(x-g)-x|    = 3.8295e+01 <= tolG          = 1.0000e-01\n0 : |proj(x-g)-x|    = 3.8295e+01 <= 1e3*eps       = 1.0000e-02\n0 : maxIter   =      40    <= iter          =     15\n------------------------- DONE! -------------------------\n"}],"key":"ijEUthYU3o"}],"key":"MYxtgbafRO"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Analyzing Inversion Outputs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tXhyibFSXM"}],"identifier":"analyzing-inversion-outputs","label":"Analyzing Inversion Outputs","html_id":"analyzing-inversion-outputs","implicit":true,"key":"teUJ6mQSfb"}],"key":"UEqBSwyLrL"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Normalized Data Misfit in 3D Pseudosection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dVHlDiEgKk"}],"identifier":"plot-normalized-data-misfit-in-3d-pseudosection","label":"Plot Normalized Data Misfit in 3D Pseudosection","html_id":"plot-normalized-data-misfit-in-3d-pseudosection","implicit":true,"key":"WHPwdCCuci"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"To see how well the recovered model reproduces the observed data, it is a good idea to compare the predicted and observed data.\nHere, we plot the normalized data misfit to determine whether the observed data are fit evenly. Correlated signatures in the normalized data misfits indicate we are overfitting/underfitting certain data. And that we must modify our uncertainties and re-run the inversion.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BPdJygC1x1"}],"key":"NJqWCtTlF5"}],"key":"I2ZRlNaEaU"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T18:16:51.331468Z","iopub.status.busy":"2024-07-17T18:16:51.329975Z","iopub.status.idle":"2024-07-17T18:16:51.344748Z","shell.execute_reply":"2024-07-17T18:16:51.343923Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Predicted data from recovered model\ndpred_dc = inv_prob_L2.dpred\n\n# Compute the normalized data misfit\ndc_normalized_misfit = (dc_data.dobs - dpred_dc) / dc_data.standard_deviation\n\nif has_plotly:\n    fig = plot_3d_pseudosection(\n        dc_data.survey,\n        dc_normalized_misfit,\n        scale=\"linear\",\n        units=\"\",\n        vlim=[-2.5, 2.5],\n        marker_opts={\"colorscale\": \"RdBu\"},\n    )\n\n    fig.update_layout(\n        title_text=\"Normalized Data Misfit\",\n        title_x=0.5,\n        title_font_size=24,\n        width=650,\n        height=500,\n        scene_camera=dict(\n            center=dict(x=0, y=0, z=-0.4), eye=dict(x=1.5, y=-1.5, z=1.8)\n        ),\n    )\n\n    #     plotly.io.show(fig)\n    html_str = plotly.io.to_html(fig)\n    display(HTML(html_str))\n\nelse:\n    print(\"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\")","key":"aTne2NJRVI"},{"type":"output","id":"3cpw2MYqEegFiC8X12EVk","data":[{"name":"stdout","output_type":"stream","text":"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\n"}],"key":"siTxC25ZvJ"}],"key":"RdGoUAXFtK"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot 2D Pseudosections for Individual Survey Lines","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XS9At72p29"}],"identifier":"plot-2d-pseudosections-for-individual-survey-lines","label":"Plot 2D Pseudosections for Individual Survey Lines","html_id":"plot-2d-pseudosections-for-individual-survey-lines","implicit":true,"key":"K3cgtZINSJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For large datasets comprised of many survey lines, interpretation can be challenging if we plot every datum. Here, we plot the observed data, predicted data and normalized data misfit for a specified survey line.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"usn10PaiGH"}],"key":"h9pI0bscEe"}],"key":"cNhTNvbNVk"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T18:16:51.348769Z","iopub.status.busy":"2024-07-17T18:16:51.348010Z","iopub.status.idle":"2024-07-17T18:16:51.983917Z","shell.execute_reply":"2024-07-17T18:16:51.982629Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Data associated with the line index provided\nline_index = 0\nk = lineID == line_index + 1\ndata_array = [\n    np.abs(dc_data.dobs[k]),\n    np.abs(dpred_dc[k]),\n    (dc_data.dobs[k] - dpred_dc[k]) / dc_data.standard_deviation[k],\n]\n\n# Plot 2D pseudosections (observed, predicted, normalized misfit)\nfig = plt.figure(figsize=(9, 11))\nplot_title = [\"Observed Voltage\", \"Predicted Voltage\", \"Normalized Misfit\"]\nplot_units = [\"V/A\", \"V/A\", \"\"]\nscale = [\"log\", \"log\", \"linear\"]\ncmap_list = [mpl.cm.viridis, mpl.cm.viridis, mpl.cm.RdYlBu]\n\nax1 = 3 * [None]\ncax1 = 3 * [None]\ncbar = 3 * [None]\ncplot = 3 * [None]\n\nfor ii in range(0, 3):\n    ax1[ii] = fig.add_axes([0.15, 0.72 - 0.33 * ii, 0.65, 0.21])\n    cax1[ii] = fig.add_axes([0.81, 0.72 - 0.33 * ii, 0.03, 0.21])\n    cplot[ii] = plot_pseudosection(\n        survey_2d_list[line_index],\n        data_array[ii],\n        \"contourf\",\n        ax=ax1[ii],\n        cax=cax1[ii],\n        scale=scale[ii],\n        cbar_label=plot_units[ii],\n        mask_topography=True,\n        contourf_opts={\"levels\": 25, \"cmap\": cmap_list[ii]},\n    )\n    ax1[ii].set_title(plot_title[ii])\n\nplt.show()","key":"hJs6Vbfifu"},{"type":"output","id":"hNjsbGxMFUwzSMqNQphPa","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"de79ea2d83a03a7e1422d8e00a3257f2","path":"/user-tutorials/build/de79ea2d83a03a7e1422d8e00a3257f2.png"},"text/plain":{"content":"<Figure size 900x1100 with 6 Axes>","content_type":"text/plain"}}}],"key":"qLkGOG1jf3"}],"key":"ObSDhKGFvX"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot True and Recovered Conductivity Model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ygmFHgPTph"}],"identifier":"plot-true-and-recovered-conductivity-model","label":"Plot True and Recovered Conductivity Model","html_id":"plot-true-and-recovered-conductivity-model","implicit":true,"key":"RhIpLp7c0K"}],"key":"ddQXqWZBbM"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T18:16:51.988151Z","iopub.status.busy":"2024-07-17T18:16:51.987738Z","iopub.status.idle":"2024-07-17T18:16:52.004105Z","shell.execute_reply":"2024-07-17T18:16:52.002881Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define conductivity model in S/m\nbackground_value = 1e-2\nconductor_value = 1e-1\nresistor_value = 1e-3\n\n# Define true model\ntrue_conductivity_model = background_value * np.ones(n_active)\n\nind_conductor = model_builder.get_indices_sphere(\n    np.r_[-300.0, 0.0, 100.0], 165.0, mesh.cell_centers[active_cells, :]\n)\ntrue_conductivity_model[ind_conductor] = conductor_value\n\nind_resistor = model_builder.get_indices_sphere(\n    np.r_[300.0, 0.0, 100.0], 165.0, mesh.cell_centers[active_cells, :]\n)\ntrue_conductivity_model[ind_resistor] = resistor_value","key":"qAtk9lLzR3"},{"type":"output","id":"dTfkbQYw-H4fOW9GQ_ppn","data":[],"key":"iNj1S0Q6jI"}],"key":"DllsRm3vgR"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T18:16:52.007439Z","iopub.status.busy":"2024-07-17T18:16:52.007218Z","iopub.status.idle":"2024-07-17T18:16:52.011382Z","shell.execute_reply":"2024-07-17T18:16:52.010252Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Convert log-conductivities to conductivities\nrecovered_conductivity_L2 = np.exp(recovered_log_conductivity_model)","key":"WbeHVj6gZ8"},{"type":"output","id":"yuyZJJfj37Kj8jDX_5pjv","data":[],"key":"CaaANzlcvh"}],"key":"EkXUT8mcbq"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T18:16:52.014989Z","iopub.status.busy":"2024-07-17T18:16:52.014770Z","iopub.status.idle":"2024-07-17T18:16:52.021375Z","shell.execute_reply":"2024-07-17T18:16:52.020215Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define a mapping to ignore inactive cells in plot\nplotting_map = maps.InjectActiveCells(mesh, active_cells, np.nan)","key":"c3jp0ySBP6"},{"type":"output","id":"bkkoO7DK0eSNyRfIN4YLd","data":[],"key":"bJ3WCAto8r"}],"key":"FagIPu4ZAF"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2024-07-17T18:16:52.024314Z","iopub.status.busy":"2024-07-17T18:16:52.024041Z","iopub.status.idle":"2024-07-17T18:16:52.811750Z","shell.execute_reply":"2024-07-17T18:16:52.810827Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"norm = LogNorm(vmin=1e-3, vmax=1e-1)\n\nfig = plt.figure(figsize=(10, 9))\nax1 = 2 * [None]\nax2 = 2 * [None]\ncbar = 2 * [None]\ntitle_str = [\n    \"True Conductivity Model\",\n    \"Recovered Model (L2)\",\n]\nplotting_model = [\n    true_conductivity_model,\n    recovered_conductivity_L2,\n]\n\nfor ii in range(0, 2):\n    ax1[ii] = fig.add_axes([0.14, 0.6 - 0.5 * ii, 0.68, 0.35])\n\n    temp = plotting_map * plotting_model[ii]\n\n    mesh.plot_slice(\n        temp,\n        ax=ax1[ii],\n        normal=\"Y\",\n        ind=int(len(mesh.h[1]) / 2),\n        grid=False,\n        pcolor_opts={\"cmap\": mpl.cm.RdYlBu_r, \"norm\": norm},\n    )\n    ax1[ii].set_title(title_str[ii])\n    ax1[ii].set_xlabel(\"x (m)\")\n    ax1[ii].set_ylabel(\"z (m)\")\n    ax1[ii].set_xlim([-1200, 1200])\n    ax1[ii].set_ylim([topo_xyz[:, -1].max() - 1200, topo_xyz[:, -1].max()])\n\n    ax2[ii] = fig.add_axes([0.84, 0.6 - 0.5 * ii, 0.03, 0.35])\n    cbar[ii] = mpl.colorbar.ColorbarBase(\n        ax2[ii], norm=norm, orientation=\"vertical\", cmap=mpl.cm.RdYlBu_r\n    )\n    cbar[ii].set_label(r\"$\\sigma$ (S/m)\", rotation=270, labelpad=15, size=16)","key":"aZy9ykdc6f"},{"type":"output","id":"wZYIMn2HpaeVFHAfOBQuN","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"55d7bd275be9f5272ca879ddd54bbbc6","path":"/user-tutorials/build/55d7bd275be9f5272ca879ddd54bbbc6.png"},"text/plain":{"content":"<Figure size 1000x900 with 4 Axes>","content_type":"text/plain"}}}],"key":"mNKg3ka76D"}],"key":"zgk7RnTbII"}],"key":"VSCkUOVHIr"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"2.5D DC Resistivity Inversion","url":"/inv-dcr-2d","group":"SimPEG User Tutorials"},"next":{"title":"Induced Polarization","url":"/ip-index","group":"SimPEG User Tutorials"}}},"domain":"http://localhost:3000"}