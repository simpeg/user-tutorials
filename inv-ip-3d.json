{"version":2,"kind":"Notebook","sha256":"e7945b18b8ffa509d04954cb1026356295e3f9ba67abe1d83ab9663c77b27ac2","slug":"inv-ip-3d","location":"/notebooks/06-ip/inv_ip_3d.ipynb","dependencies":[],"frontmatter":{"title":"3D IP Inversion","authors":[{"id":"devincowan","nameParsed":{"literal":"Devin Cowan","given":"Devin","family":"Cowan"},"name":"Devin Cowan","orcid":"0000-0002-0089-402X","roles":["Writing – original draft","Writing – review & editing","Software"],"affiliations":["ubc"]}],"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/simpeg/user-tutorials","subject":"SimPEG User Tutorials","keywords":["geophysics","inversions","python","open-source"],"affiliations":[{"id":"ubc","name":"University of British Columbia","department":"Department of Earth, Ocean and Atmospheric Sciences","address":"2020 – 2207 Main Mall","city":"Vancouver","state":"British Columbia","postal_code":"V6T 1Z4","country":"Canada","isni":"0000 0001 2288 9830","ror":"https://ror.org/03rmrcq20","phone":"604 822 2449"},{"id":"kobold","name":"Kobold Metals"}],"numbering":{"title":{"offset":1}},"source_url":"https://github.com/simpeg/user-tutorials/blob/main/notebooks/06-ip/inv_ip_3d.ipynb","edit_url":"https://github.com/simpeg/user-tutorials/edit/main/notebooks/06-ip/inv_ip_3d.ipynb","exports":[{"format":"ipynb","filename":"inv_ip_3d.ipynb","url":"/user-tutorials/build/inv_ip_3d-fbcc8cb51a9930c913beda8b73d5ab1f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Intermediate notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tyaWaOkwlS"}],"key":"lVqm9pDW0V"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This tutorial focusses on intermediate level functionality within SimPEG. Basic functionality within SimPEG is not discussed in detail, as we assume the user is already familiar.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aMrhtfCyIJ"}],"key":"sO2v5TUmLg"}],"class":"caution","key":"Hkbi0kehZn"}],"key":"ufM1EA4Bw9"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Medium-weight notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Mbc9fwmuDe"}],"key":"jCGBRc1BOM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Requires moderate computational resources. Run-times may exceed several minutes and require up to 8 GB of available RAM.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mMZmgwtOw1"}],"key":"pAB537ev2W"}],"class":"caution","key":"Z2jKrOHsNQ"}],"key":"J1mbwhr5Mb"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Keywords:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jvYVZoKdqv"}],"key":"E8fe6fuIcx"},{"type":"text","value":" induced polarization, 3D inversion, sparse norm, tree mesh.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DVqjEcaYo9"}],"key":"tIxAVOZFjO"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Summary:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mfADBC2aaM"}],"key":"dFiUm2ZFR1"},{"type":"text","value":" Here we invert apparent chargeability data to recover the subsurface chargeability distribution on a tree mesh. We demonstrate two inversion approaches for recovering a chargeability model:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"XrF49iSKy3"}],"key":"UoBWnF54j2"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Weighted least-squares inversion","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"We8PphcpR4"}],"key":"rZOPIEMtAX"}],"key":"yByYVpwPHx"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Iteratively re-weighted least-squares (IRLS) inversion","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"C81I3tZZ2n"}],"key":"EvmCqaQar5"}],"key":"NnmmHg8Rl4"}],"key":"VRYFsQmpeR"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Almost all of the details of defining and carrying out weighted least-squares and iteratively weighted least squares inversion were covered in the ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"sfvm8E1Z8d"},{"type":"link","url":"fwd_dcip_3d.ipynb","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"3D DC Resistivity Inversion","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"rsv9PNQSC9"}],"urlSource":"fwd_dcip_3d.ipynb","key":"yLOfaklUVZ"},{"type":"text","value":" tutorial. And functionality specific to defining the IP forward simulation was covered in the ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"eD42F8ksrH"},{"type":"link","url":"fwd_dcip_3d.ipynb","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"3D IP Forward Simulation","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Nea7FZWQG1"}],"urlSource":"fwd_dcip_3d.ipynb","key":"pVrRPfd429"},{"type":"text","value":" tutorial. As we will focus primarily on content specific to IP inversion, we strongly urge the reader to work through the aforementioned tutorials prior to working through this one.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"qIOo4luYVq"}],"key":"LCJDvtIDVB"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Learning Objectives:","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"tGF5J0Z68S"}],"key":"xapjcmYNP4"}],"key":"rIDLCM9NG6"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Assigning appropriate uncertainties to IP data","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"GcfXDMVrGU"}],"key":"RaGAEgdwkq"}],"key":"uhbEhzEBse"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Designing a mesh for IP inversion","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"EDPwh41uxK"}],"key":"oRcH0GVOUQ"}],"key":"hGpTMeCSNB"},{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Obtaining a background conductivity/resistivity model for the IP inversion","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Mcnj2gYHQL"}],"key":"Hs9CfTwpXu"}],"key":"NyzWT5Kpmc"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Analyzing inversion results","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"jdaihp1EHe"}],"key":"kefKRM9woO"}],"key":"FtSdkhY3Zj"}],"key":"iftBDV0Ge5"}],"key":"gS6xAAqFb2"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import Modules","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ipv3YQTNc7"}],"identifier":"import-modules","label":"Import Modules","html_id":"import-modules","implicit":true,"key":"kz5MqqO1Ko"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here, we import all of the functionality required to run the notebook for the tutorial exercise.\nAll of the functionality specific to IP is imported from ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"z5DCFb8HhQ"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/simpeg.electromagnetics.static.induced_polarization.html#module-simpeg.electromagnetics.static.induced_polarization","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg​.electromagnetics​.static​.induced​_polarization","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YQWuGNJIai"}],"urlSource":"xref:simpeg#simpeg.electromagnetics.static.induced_polarization","internal":false,"protocol":"xref:sphinx","key":"a7l5cuHD8V"},{"type":"text","value":".\nWe also import some useful utility functions from ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GzIbhVYUjE"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/simpeg.utils.html#module-simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JfM2uBMDBL"}],"urlSource":"xref:simpeg#simpeg.utils","internal":false,"protocol":"xref:sphinx","key":"Crw5SF1wQg"},{"type":"text","value":". Classes required to define the data misfit, regularization, optimization, etc... are imported from elsewhere within SimPEG. We also import some useful utility functions from ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jxliksfSzm"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/simpeg.utils.html#module-simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg.utils","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vKPjX2LxCa"}],"urlSource":"xref:simpeg#simpeg.utils","internal":false,"protocol":"xref:sphinx","key":"ILvMpVPGnv"},{"type":"text","value":". To generate the mesh used for the inversion, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PClO0XCBUW"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"discretize","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QjuhwpmYgW"}],"urlSource":"https://discretize.simpeg.xyz/en/main","key":"iIJWZRZAUS"},{"type":"text","value":" package.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"liEDSG1h61"}],"key":"j6BAwTYi7L"}],"key":"BSP3tnCJHr"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:50.111408Z","iopub.status.busy":"2025-05-23T16:56:50.110908Z","iopub.status.idle":"2025-05-23T16:56:52.002935Z","shell.execute_reply":"2025-05-23T16:56:52.001876Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# SimPEG functionality\nfrom simpeg.electromagnetics.static import induced_polarization as ip\nfrom simpeg.electromagnetics.static.utils.static_utils import (\n    plot_pseudosection,\n    convert_survey_3d_to_2d_lines,\n)\nfrom simpeg.utils.io_utils.io_utils_electromagnetics import read_dcip_xyz\nfrom simpeg.utils import download, model_builder\nfrom simpeg import (\n    maps,\n    data_misfit,\n    regularization,\n    optimization,\n    inverse_problem,\n    inversion,\n    directives,\n)\n\ntry:\n    import plotly\n    from simpeg.electromagnetics.static.utils.static_utils import plot_3d_pseudosection\n    from IPython.core.display import display, HTML\n\n    has_plotly = True\nexcept ImportError:\n    has_plotly = False\n    pass\n\n# discretize functionality\nfrom discretize import TreeMesh\nfrom discretize.utils import active_from_xyz\n\n# Basic Python functionality\nimport os\nimport tarfile\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LogNorm, Normalize\n\nmpl.rcParams.update({\"font.size\": 16})","key":"UyF1ohTZp8"},{"type":"output","id":"V4vx8MbSqASNzhdgSShe2","data":[],"key":"CjfF0qn1sx"}],"key":"cn6VwWbLUl"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load and Plot Tutorial Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"o1cdjheX8I"}],"identifier":"load-and-plot-tutorial-data","label":"Load and Plot Tutorial Data","html_id":"load-and-plot-tutorial-data","implicit":true,"key":"F9gPIlEzga"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For most geophysical inversion projects, a reasonable inversion result can be obtained so long as the practitioner has observed data, the survey geometry and topography. For this tutorial, the observed data and topography files are provided. Here, we download and import the observed data and topography into the SimPEG framework.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rCid5aVcba"}],"key":"mHB8L7duiO"}],"key":"FS5WTDTsAt"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:52.007594Z","iopub.status.busy":"2025-05-23T16:56:52.005951Z","iopub.status.idle":"2025-05-23T16:56:52.609852Z","shell.execute_reply":"2025-05-23T16:56:52.608719Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# URL to download from repository assets\ndata_source = \"https://github.com/simpeg/user-tutorials/raw/main/assets/06-ip/inv_ip_3d_files.tar.gz\"\n\n# download the data\ndownloaded_data = download(data_source, overwrite=True)\n\n# unzip the tarfile\ntar = tarfile.open(downloaded_data, \"r\")\ntar.extractall()\ntar.close()\n\n# path to the directory containing our data\ndir_path = downloaded_data.split(\".\")[0] + os.path.sep\n\n# files to work with\ntopo_filename = dir_path + \"topo_xyz.txt\"\ndata_filename = dir_path + \"ip_data.xyz\"","key":"VFqg9Hgj71"},{"type":"output","id":"YUzS1-s6nBUcKuEjxFDNp","data":[{"name":"stdout","output_type":"stream","text":"Downloading https://github.com/simpeg/user-tutorials/raw/main/assets/06-ip/inv_ip_3d_files.tar.gz\n"},{"name":"stdout","output_type":"stream","text":"   saved to: /home/ssoler/git/user-tutorials/notebooks/06-ip/inv_ip_3d_files.tar.gz\nDownload completed!\n"},{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_978829/1251919568.py:9: DeprecationWarning: Python 3.14 will, by default, filter extracted tar archives and reject files or modify their metadata. Use the filter argument to control this behavior.\n  tar.extractall()\n"}],"key":"dHmyhpKHmX"}],"key":"haJYpPGgvs"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load the Topography","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KeqB12g49u"}],"identifier":"load-the-topography","label":"Load the Topography","html_id":"load-the-topography","implicit":true,"key":"LXrV7HjWlC"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For most geophysical inversion projects, a reasonable inversion result can be obtained so long as the practitioner has observed data, the survey geometry and topography. For this tutorial, the observed data and topography files are provided. Here, we download and import the observed data and topography into the SimPEG framework.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZlTu3TEYlJ"}],"key":"S1NaMbS7rD"}],"key":"BrOjiMSulw"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:52.613905Z","iopub.status.busy":"2025-05-23T16:56:52.613517Z","iopub.status.idle":"2025-05-23T16:56:52.629858Z","shell.execute_reply":"2025-05-23T16:56:52.629106Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"topo_xyz = np.loadtxt(str(topo_filename))","key":"tpSZM5DeTt"},{"type":"output","id":"n4Td_qewalYk7TO5_jD4i","data":[],"key":"lfRanWKwBj"}],"key":"EQJ0iJVDf0"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:52.633589Z","iopub.status.busy":"2025-05-23T16:56:52.633307Z","iopub.status.idle":"2025-05-23T16:56:53.977402Z","shell.execute_reply":"2025-05-23T16:56:53.976729Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(6, 6))\nax = fig.add_axes([0.1, 0.1, 0.8, 0.8], projection=\"3d\")\nax.set_zlim([-400, 400])\nax.scatter3D(topo_xyz[:, 0], topo_xyz[:, 1], topo_xyz[:, 2], s=0.25, c=\"b\")\nax.set_box_aspect(aspect=None, zoom=0.85)\nax.set_xlabel(\"X (m)\", labelpad=10)\nax.set_ylabel(\"Y (m)\", labelpad=10)\nax.set_zlabel(\"Z (m)\", labelpad=10)\nax.set_title(\"Topography (Exaggerated z-axis)\", fontsize=16, pad=-20)\nax.view_init(elev=45.0, azim=-125)","key":"mFQ3HEoKp5"},{"type":"output","id":"hACm2bLzBIPU2EnfzRLBf","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"e3e6dd1ee818179ff0219a11c7109a28","path":"/user-tutorials/build/e3e6dd1ee818179ff0219a11c7109a28.png"},"text/plain":{"content":"<Figure size 600x600 with 1 Axes>","content_type":"text/plain"}}}],"key":"cCZzfmr47x"}],"key":"qtbbyTCvez"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Load IP Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"i8BTUoiKiL"}],"identifier":"load-ip-data","label":"Load IP Data","html_id":"load-ip-data","implicit":true,"key":"WZFVSAoNAJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Option A: DCIP3D formatted data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wnzTepqh7D"}],"key":"yQbjHlgdug"}],"key":"y7Nb6fxe4e"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"q7degmyssj"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.utils.io_utils.read_dcip3d_ubc.html#simpeg.utils.io_utils.read_dcip3d_ubc","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"read_dcip3d_ubc","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"WGVQWziNDv"}],"urlSource":"xref:simpeg#simpeg.utils.io_utils.read_dcip3d_ubc","internal":false,"protocol":"xref:sphinx","key":"mjQQCqF2us"},{"type":"text","value":" utility function can be used to load DC/IP data stored in a UBC-GIF formatted file. This function outputs a SimPEG ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ZBnh0Yqagj"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.data.Data.html#simpeg.data.data","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Data","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"otaECnerUX"}],"urlSource":"xref:simpeg#simpeg.data.Data","internal":false,"protocol":"xref:sphinx","key":"XqSQz1ZDUi"},{"type":"text","value":" object.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"mnBmSUxOzK"}],"key":"etPSvOvrn3"}],"key":"HhMMCYF389"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Option B: Load XYZ formatted data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"G7qGhALQwM"}],"key":"cuV1eIPzqd"}],"key":"gbQMmzQpgf"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For this tutorial, the observed data are organized within an XYZ formatted file. We can use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"v4E8G6unUG"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.utils.io_utils.read_dcip_xyz.html#simpeg.utils.io_utils.read_dcip_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"read_dcip_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"g2uOSc0cqV"}],"urlSource":"xref:simpeg#simpeg.utils.io_utils.read_dcip_xyz","internal":false,"protocol":"xref:sphinx","key":"vDDQT58TlX"},{"type":"text","value":" utility function to load data in this format. This function outputs a SimPEG ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PPtLJSd3Nc"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.data.Data.html#simpeg.data.data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cP2ToTAtuM"}],"urlSource":"xref:simpeg#simpeg.data.Data","internal":false,"protocol":"xref:sphinx","key":"f6psdqXWdL"},{"type":"text","value":" object. The data are apparent chargeabilities in V/V.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"L3zNsnXz2L"}],"key":"wA7Sk9uEM0"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"v8hmI76oHX"},{"type":"inlineCode","value":"dict_headers","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"eAZmmaaOyA"},{"type":"text","value":" input argument can be used to import other data columns that are not required to define the SimPEG data object. In this case, we import a column that defines the survey line associated with each datum. We will use this to plot pseudosections for individual survey lines.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vnYRFSqQiJ"}],"key":"SdDuCj1ap5"}],"key":"UegvlrsNZF"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:53.982588Z","iopub.status.busy":"2025-05-23T16:56:53.982328Z","iopub.status.idle":"2025-05-23T16:56:54.017249Z","shell.execute_reply":"2025-05-23T16:56:54.016596Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"ip_data, out_dict = read_dcip_xyz(\n    data_filename,\n    \"apparent_chargeability\",\n    data_header=\"APP_CHG\",\n    uncertainties_header=\"UNCERT\",\n    is_surface_data=False,\n    dict_headers=[\"LINEID\"],\n)","key":"FcjTGqV15C"},{"type":"output","id":"T-nrg7_IViTJ1GwuOBj5h","data":[],"key":"w0rGjHOpO0"}],"key":"JHUwrJxKaB"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Observed Data in 3D Pseudosection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"E7kKwzDFO3"}],"identifier":"plot-observed-data-in-3d-pseudosection","label":"Plot Observed Data in 3D Pseudosection","html_id":"plot-observed-data-in-3d-pseudosection","implicit":true,"key":"FhlNJDezUM"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ofD6JcJxg5"},{"type":"link","url":"simpeg#simpeg.electromagnetics.static.utils.plot_3d_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"plot​_3d​_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"udT6Z9DKzE"}],"urlSource":"simpeg#simpeg.electromagnetics.static.utils.plot_3d_pseudosection","key":"FmWZlSice9"},{"type":"text","value":" utility function to represent the observed data in pseudosection. In this case, the apparent chargeabilities are represented in V/V.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jC36w9lH8H"}],"key":"xF0Fhogw1v"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"In the case of secondary voltage data, you would need to convert the values to apparent chargeabilities. This accomplished by normalizing the secondary IP voltages by the DC voltages.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RKuBNfBuAP"}],"key":"zosYSZa2T5"}],"key":"ZhbE4WM5B6"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.020648Z","iopub.status.busy":"2025-05-23T16:56:54.020345Z","iopub.status.idle":"2025-05-23T16:56:54.025287Z","shell.execute_reply":"2025-05-23T16:56:54.024665Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"if has_plotly:\n    fig = plot_3d_pseudosection(\n        ip_data.survey,\n        ip_data.dobs,\n        scale=\"linear\",\n        units=\"V/V\",\n        vlim=[0, np.max(ip_data.dobs)],\n        marker_opts={\"colorscale\": \"plasma\"},\n    )\n\n    fig.update_layout(\n        title_text=\"Apparent Chargeability\",\n        title_x=0.5,\n        title_font_size=24,\n        width=650,\n        height=500,\n        scene_camera=dict(\n            center=dict(x=0, y=0, z=-0.4), eye=dict(x=1.5, y=-1.5, z=1.8)\n        ),\n    )\n\n    #     plotly.io.show(fig)\n    html_str = plotly.io.to_html(fig)\n    display(HTML(html_str))\n\nelse:\n    print(\"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\")","key":"hONXaBR86M"},{"type":"output","id":"bRn-EjyZHAndgK9rMBk0x","data":[{"name":"stdout","output_type":"stream","text":"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\n"}],"key":"JvSYMSG7YX"}],"key":"YEDbuGKlM6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Observed Data in 2D Pseudosection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YwPdLbqYyM"}],"identifier":"plot-observed-data-in-2d-pseudosection","label":"Plot Observed Data in 2D Pseudosection","html_id":"plot-observed-data-in-2d-pseudosection","implicit":true,"key":"ZErrZzobfJ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As demonstrated in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NsK72RhaDC"},{"type":"link","url":"fwd_dcr_3d.ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"3D Forward Simulation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RsJV2fDHfY"}],"urlSource":"fwd_dcr_3d.ipynb","key":"OnoGv5AXxt"},{"type":"text","value":" tutorial, we can parse the 3D survey into a set of 2D survey lines if we know which survey line is associated with each datum. Then we can plot individual pseudosections for each survey line. We use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EYmrq6WPfl"},{"type":"link","url":"simpeg#simpeg.electromagnetics.static.utils.convert_survey_3d_to_2d_lines","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"convert​_survey​_3d​_to​_2d​_lines","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IcWsdKqoy8"}],"urlSource":"simpeg#simpeg.electromagnetics.static.utils.convert_survey_3d_to_2d_lines","key":"Lh8UUmEwrA"},{"type":"text","value":" to generate the list of 2D surveys. And we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cq1JZLCPL3"},{"type":"link","url":"simpeg#simpeg.electromagnetics.static.utils.plot_2d_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"plot​_2d​_pseudosection","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DUODDcZNaS"}],"urlSource":"simpeg#simpeg.electromagnetics.static.utils.plot_2d_pseudosection","key":"LPUSDKMCA7"},{"type":"text","value":" utility function to plot the pseudosection for the desired survey line.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"COyHT7qIIH"}],"key":"vNK4C4ALoH"}],"key":"nlWSypRFN9"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.028593Z","iopub.status.busy":"2025-05-23T16:56:54.028352Z","iopub.status.idle":"2025-05-23T16:56:54.031883Z","shell.execute_reply":"2025-05-23T16:56:54.031301Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Extract line IDs and make sure they are integers\nlineID = np.array(out_dict[\"LINEID\"], dtype=int)","key":"wDIpmPZaAf"},{"type":"output","id":"p-k9dCVsWdxlP_K1pG2a9","data":[],"key":"uZQ9oU0gwZ"}],"key":"FpqgT0TvzA"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.034255Z","iopub.status.busy":"2025-05-23T16:56:54.033912Z","iopub.status.idle":"2025-05-23T16:56:54.067325Z","shell.execute_reply":"2025-05-23T16:56:54.066692Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Create list of 2D surveys\nsurvey_2d_list, index_list = convert_survey_3d_to_2d_lines(\n    ip_data.survey, lineID, data_type=\"apparent_chargeability\", output_indexing=True\n)","key":"ayNNLwEKzz"},{"type":"output","id":"8ePD1dSCgB2IQb5fsCLRT","data":[],"key":"WqV4tj0Sog"}],"key":"ecgpLPwpIn"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.070193Z","iopub.status.busy":"2025-05-23T16:56:54.069957Z","iopub.status.idle":"2025-05-23T16:56:54.073528Z","shell.execute_reply":"2025-05-23T16:56:54.073029Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dobs_2d_list = []\napparent_chargeabilities_2d = []\nfor ind in index_list:\n    dobs_2d_list.append(ip_data.dobs[ind])\n    apparent_chargeabilities_2d.append(ip_data.dobs[ind])","key":"xcqVTf1vWX"},{"type":"output","id":"Efe-cDAXrToaxLw3jDoRK","data":[],"key":"JRjj6hAxid"}],"key":"d93L5lsQm4"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.076414Z","iopub.status.busy":"2025-05-23T16:56:54.076102Z","iopub.status.idle":"2025-05-23T16:56:54.252119Z","shell.execute_reply":"2025-05-23T16:56:54.251384Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"line_index = 0\n\nfig = plt.figure(figsize=(8, 2.75))\nax1 = fig.add_axes([0.1, 0.15, 0.75, 0.78])\nplot_pseudosection(\n    survey_2d_list[line_index],\n    dobs=apparent_chargeabilities_2d[line_index],\n    plot_type=\"contourf\",\n    ax=ax1,\n    scale=\"linear\",\n    cbar_label=\"V/V\",\n    mask_topography=True,\n    contourf_opts={\"levels\": 20, \"cmap\": mpl.cm.plasma},\n)\nax1.set_title(\"Apparent Chargeability\")\nplt.show()","key":"h49TgPLA6J"},{"type":"output","id":"SwVDS5Yg8F5UzwDAouqtD","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"71567f977197785b396ee3ee31088c85","path":"/user-tutorials/build/71567f977197785b396ee3ee31088c85.png"},"text/plain":{"content":"<Figure size 800x275 with 2 Axes>","content_type":"text/plain"}}}],"key":"pQnAIOC1br"}],"key":"se366mpa0m"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Assign Uncertainties","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KGMcdnwzpI"}],"identifier":"assign-uncertainties","label":"Assign Uncertainties","html_id":"assign-uncertainties","implicit":true,"key":"B1RQcJyv6K"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Inversion with SimPEG requires that we define the uncertainties on our data; that is, an estimate of the standard deviation of the noise on our data assuming it is uncorrelated Gaussian with zero mean. An online resource explaining uncertainties and their role in the inversion can be found ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XrSQeyNRSz"},{"type":"link","url":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/Uncertainties.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OlqxpSflGL"}],"urlSource":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/Uncertainties.html","key":"IeK2ch5Y4E"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"taZadMmnz5"}],"key":"TG1fo1Wmvk"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"For secondary voltage data,","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"UejyeGmi6I"}],"key":"wBX6cxq5DO"},{"type":"text","value":" we generally apply a percent uncertainty and a very small floor uncertainty to all data. Differences in electrode spacing and subsurface conductivity result in secondary voltage IP data that span many orders of magnitude. A percent uncertainty ensures all data are fit equally. Depending on the quality of the data, we may choose a percent uncertainty between 2% - 10%. The floor uncertainty ensures stability when there are zero-crossings or erroneously small voltages.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"RfR5lNiRMg"}],"key":"rFoEiryByh"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"For apparent chargeability data,","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"jMb7to3o3J"}],"key":"o8ec4QQ2sG"},{"type":"text","value":" we generally apply a floor uncertainty to all data. This is because apparent chargeability data is obtained by normalizing the secondary voltage defining the IP signature by the DC voltage. This effectively removes the influence of electrode spacing on the amplitude of the datum. Here, we apply a floor uncertainty of 5e-3 V/V to all data.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"x0Md8E9WfQ"}],"key":"rxt6S3lTYe"}],"key":"JILpnruRi0"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.255403Z","iopub.status.busy":"2025-05-23T16:56:54.255105Z","iopub.status.idle":"2025-05-23T16:56:54.258468Z","shell.execute_reply":"2025-05-23T16:56:54.257960Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"ip_data.standard_deviation = 5e-3 * np.ones_like(ip_data.dobs)","key":"CYFfvpZkjJ"},{"type":"output","id":"dSjVQgijg_NHw8kvpcg43","data":[],"key":"Z2R0osHL2g"}],"key":"UfXIOqNwmy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Design a (Tree) Mesh","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZejGiImIW0"}],"identifier":"design-a-tree-mesh","label":"Design a (Tree) Mesh","html_id":"design-a-tree-mesh","implicit":true,"key":"qLM8XDjfN7"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"IP inversion is carried out on the same mesh that is used for DC resistivity inversion. Here, we reproduce the survey-based meshing approach that was used in the  ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AURjB2hcGK"},{"type":"link","url":"/inv-dcr-3d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"3D Inversion of DC Resistivity Data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jfZpM3wGfm"}],"urlSource":"../05-dcr/inv_dcr_3d.ipynb","dataUrl":"/inv-dcr-3d.json","internal":true,"protocol":"file","key":"MiayKoqTje"},{"type":"text","value":" tutorial. The best-practices for meshes design for DC/IP problems is provided in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GYo3mqjPCg"},{"type":"link","url":"/fwd-dcr-2d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"2.5D Forward Simulation of DC Resistivity Data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iMFm6D03AK"}],"urlSource":"../05-dcr/fwd_dcr_2d.ipynb","dataUrl":"/fwd-dcr-2d.json","internal":true,"protocol":"file","key":"JRkfieUPq3"},{"type":"text","value":" tutorial. The same rules for defining appropriate meshes for 2.5D simulations and inversion apply to 3D simulations and inversion.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hQfmxgNuB1"}],"key":"z4tuvRpSYf"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Tutorial mesh:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cfe0rMYM0o"}],"key":"RKko6ZKKAQ"},{"type":"text","value":" Here, a minimum cell width of 25 m (or 1/4 the minimum electrode spacing) is used within our survey region. The largest electrode spacing was 1000 m, so a the padding was extended at least 3000 m from the survey region. Using the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"E9imjaAhOL"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.TreeMesh.refine_surface.html#discretize.treemesh.refine_surface","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"refine_surface","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"osu9sdVLxz"}],"urlSource":"xref:discretize#discretize.TreeMesh.refine_surface","internal":false,"protocol":"xref:sphinx","key":"EOMUc15PFL"},{"type":"text","value":" method, we refine the tree mesh where there is significant topography. And using the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"f6rXRUrFiF"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.TreeMesh.refine_points.html#discretize.treemesh.refine_points","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"refine_points","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PiO1hZcjvA"}],"urlSource":"xref:discretize#discretize.TreeMesh.refine_points","internal":false,"protocol":"xref:sphinx","key":"IgfXw6e3Wx"},{"type":"text","value":" methods, we refine based on electrodes locations. Visit the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"TxjQhrQmOX"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.TreeMesh.html#discretize.treemesh","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"tree mesh","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KQp5DkPHWU"}],"urlSource":"xref:discretize#discretize.TreeMesh","internal":false,"protocol":"xref:sphinx","key":"VXEJOtgWoj"},{"type":"text","value":" API to see additional refinement methods.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zgKjoku3kc"}],"key":"RIpUfTfZgv"}],"key":"vm2qg807DU"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.261821Z","iopub.status.busy":"2025-05-23T16:56:54.261547Z","iopub.status.idle":"2025-05-23T16:56:54.986337Z","shell.execute_reply":"2025-05-23T16:56:54.985387Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Defining domain size and minimum cell size\ndh = 25.0  # base cell width\ndom_width_x = 8000.0  # domain width x\ndom_width_y = 8000.0  # domain width y\ndom_width_z = 4000.0  # domain width z\n\n# Number of base mesh cells in each direction. Must be a power of 2\nnbcx = 2 ** int(np.round(np.log(dom_width_x / dh) / np.log(2.0)))  # num. base cells x\nnbcy = 2 ** int(np.round(np.log(dom_width_y / dh) / np.log(2.0)))  # num. base cells y\nnbcz = 2 ** int(np.round(np.log(dom_width_z / dh) / np.log(2.0)))  # num. base cells z\n\n# Define the base mesh\nhx = [(dh, nbcx)]\nhy = [(dh, nbcy)]\nhz = [(dh, nbcz)]\nmesh = TreeMesh([hx, hy, hz], x0=\"CCN\", diagonal_balance=True)\n\n# Shift top to maximum topography\nmesh.origin = mesh.origin + np.r_[0.0, 0.0, topo_xyz[:, -1].max()]\n\n# Mesh refinement based on surface topography\nk = np.sqrt(np.sum(topo_xyz[:, 0:2] ** 2, axis=1)) < 1200\nmesh.refine_surface(topo_xyz[k, :], padding_cells_by_level=[0, 4, 4], finalize=False)\n\n# Extract unique electrode locations.\nunique_locations = ip_data.survey.unique_electrode_locations\n\n# Mesh refinement near electrodes.\nmesh.refine_points(unique_locations, padding_cells_by_level=[6, 6, 4], finalize=False)\n\n# Finalize the mesh\nmesh.finalize()","key":"IjNc1MXduQ"},{"type":"output","id":"fnu-BajO6iWnHnhL4oKWb","data":[],"key":"UNV1kLE6dy"}],"key":"Gf4BQmjtYM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Active Cells","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"S6uIA1Aowk"}],"identifier":"define-the-active-cells","label":"Define the Active Cells","html_id":"define-the-active-cells","implicit":true,"key":"UdYquWGllm"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"F21NH6vqT9"},{"type":"link","url":"https://discretize.simpeg.xyz/en/main/api/generated/discretize.utils.active_from_xyz.html#discretize.utils.active_from_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"active_from_xyz","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MUk5NEb1XN"}],"urlSource":"xref:discretize#discretize.utils.active_from_xyz","internal":false,"protocol":"xref:sphinx","key":"OHg3irvE22"},{"type":"text","value":" utility function to obtain the indices of the active mesh cells from topography (e.g. cells below surface).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mS8NS9XaDk"}],"key":"rrcjjZ3bS4"}],"key":"GDx2XoqBV3"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:54.989919Z","iopub.status.busy":"2025-05-23T16:56:54.989667Z","iopub.status.idle":"2025-05-23T16:56:55.359398Z","shell.execute_reply":"2025-05-23T16:56:55.358671Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Indices of the active mesh cells from topography (e.g. cells below surface)\nactive_cells = active_from_xyz(mesh, topo_xyz)\n\n# number of active cells\nn_active = np.sum(active_cells)","key":"AbJccxLkL8"},{"type":"output","id":"dGh-Z9KoNptjqNiddzxat","data":[],"key":"Ar9wtMNO6L"}],"key":"dx5NUzACQe"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Project Electrodes to Discretized Topography","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"erSofpwb9i"}],"identifier":"project-electrodes-to-discretized-topography","label":"Project Electrodes to Discretized Topography","html_id":"project-electrodes-to-discretized-topography","implicit":true,"key":"kf0SlRpJNn"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Surface IP data will not be modeled accurately if the electrodes are modeled as living above or below the surface. It is especially problematic when electrodes are modeled as living in the air. Prior to inverting surface IP data, we must project the electrodes from their true elevation to the surface of the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AVDs7ytWTV"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"discretized","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"I3T7XTxYU9"}],"key":"u8ocdtLUly"},{"type":"text","value":" topography. This is done using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ciLiutezf8"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.electromagnetics.static.resistivity.Survey.drape_electrodes_on_topography.html#simpeg.electromagnetics.static.resistivity.survey.drape_electrodes_on_topography","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"drape​_electrodes​_on​_topography","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"v5RKNs47Fu"}],"urlSource":"xref:simpeg#simpeg.electromagnetics.static.resistivity.Survey.drape_electrodes_on_topography","internal":false,"protocol":"xref:sphinx","key":"rSZPzwRhlh"},{"type":"text","value":" method.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mRyPOGMPyr"}],"key":"HoXw52Qf6p"}],"key":"xa1CDLxasg"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.363042Z","iopub.status.busy":"2025-05-23T16:56:55.362804Z","iopub.status.idle":"2025-05-23T16:56:55.393542Z","shell.execute_reply":"2025-05-23T16:56:55.392811Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"ip_data.survey.drape_electrodes_on_topography(mesh, active_cells, option=\"top\")","key":"iqE3vs5TMo"},{"type":"output","id":"UNcdsgJRnYkkShpp-fBuh","data":[],"key":"Er3fi7m01r"}],"key":"W6XtD5eyq0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Background Conductivity/Resistivity","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zs1FEp3XHR"}],"identifier":"define-the-background-conductivity-resistivity","label":"Define the Background Conductivity/Resistivity","html_id":"define-the-background-conductivity-resistivity","implicit":true,"key":"JIrO8NZabW"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In order to invert IP data, we require the background conductivity/resistivity defined on the entire mesh. ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EMHNnrJ5m8"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In practice,","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vDanNnv8pG"}],"key":"togrWYXEe8"},{"type":"text","value":" a conductivity/resistivity model is recovered via inverting DC resistivity data; see the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gHYCvgUhzS"},{"type":"link","url":"/inv-dcr-3d","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"3D Inversion of DC Resistivity Data","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"k0whZIxndK"}],"urlSource":"../05-dcr/inv_dcr_3d.ipynb","dataUrl":"/inv-dcr-3d.json","internal":true,"protocol":"file","key":"JtUT7hcAHd"},{"type":"text","value":" tutorial. Since the conductivity/resistivity model greatly impacts the sensitivities for the IP problem, IP inversion is most successful when the recovered conductivity/resistivity model accurately characterizes the true subsurface distribution of electrical properties. ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ByN1I1QPRx"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For the tutorial,","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"slfMpVUXLL"}],"key":"QlsGZyRvgK"},{"type":"text","value":" the true subsurface conductivity is used as the background conductivity for the IP inversion.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"S7tldQLTOG"}],"key":"FBOCiWS9OK"}],"key":"ycckzsUUri"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.397334Z","iopub.status.busy":"2025-05-23T16:56:55.397072Z","iopub.status.idle":"2025-05-23T16:56:55.400732Z","shell.execute_reply":"2025-05-23T16:56:55.400200Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define conductivity model in S/m\nair_conductivity = 1e-8\nbackground_conductivity = 1e-2\nconductor_conductivity = 1e-1\nresistor_conductivity = 1e-3","key":"xoEYZnpJH1"},{"type":"output","id":"WYjyMH7J7wVe1-5QAM4zR","data":[],"key":"YItBBS9aQa"}],"key":"SIfNeutdsq"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.403833Z","iopub.status.busy":"2025-05-23T16:56:55.403589Z","iopub.status.idle":"2025-05-23T16:56:55.413520Z","shell.execute_reply":"2025-05-23T16:56:55.412983Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define conductivity model\nconductivity_model = background_conductivity * np.ones(n_active)\n\nind_conductor = model_builder.get_indices_sphere(\n    np.r_[-300.0, 0.0, 100.0], 165.0, mesh.cell_centers[active_cells, :]\n)\nconductivity_model[ind_conductor] = conductor_conductivity\n\nind_resistor = model_builder.get_indices_sphere(\n    np.r_[300.0, 0.0, 100.0], 165.0, mesh.cell_centers[active_cells, :]\n)\nconductivity_model[ind_resistor] = resistor_conductivity","key":"JFDIWHzHk2"},{"type":"output","id":"UxkFnsvKn_fYfd0clUOnO","data":[],"key":"HnQBsgB5Jc"}],"key":"gpzqxddR7k"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.416070Z","iopub.status.busy":"2025-05-23T16:56:55.415793Z","iopub.status.idle":"2025-05-23T16:56:55.423783Z","shell.execute_reply":"2025-05-23T16:56:55.423140Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the mapping from the model to conductivity for all mesh cells.\nconductivity_map = maps.InjectActiveCells(mesh, active_cells, air_conductivity)","key":"huBjTP7H5o"},{"type":"output","id":"Jhwv7jInhkdcds_Y4GQCe","data":[],"key":"FSktaDqCHz"}],"key":"ZtJeH7rTfJ"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.426615Z","iopub.status.busy":"2025-05-23T16:56:55.426340Z","iopub.status.idle":"2025-05-23T16:56:55.433881Z","shell.execute_reply":"2025-05-23T16:56:55.433180Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Mapping to ignore inactive cells in plot\nplotting_map = maps.InjectActiveCells(mesh, active_cells, np.nan)","key":"w2hnRGUyGo"},{"type":"output","id":"Tr3W1ig7NB4x6_YyfECqH","data":[],"key":"xIeHOJ91kY"}],"key":"lLOtqjDSSP"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.436920Z","iopub.status.busy":"2025-05-23T16:56:55.436612Z","iopub.status.idle":"2025-05-23T16:56:55.850856Z","shell.execute_reply":"2025-05-23T16:56:55.850209Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(10, 4.5))\n\nlog_norm = LogNorm(vmin=1e-3, vmax=0.1)\n\nax1 = fig.add_axes([0.15, 0.15, 0.68, 0.75])\nmesh.plot_slice(\n    plotting_map * conductivity_model,\n    ax=ax1,\n    normal=\"Y\",\n    ind=int(len(mesh.h[1]) / 2),\n    grid=True,\n    pcolor_opts={\"cmap\": mpl.cm.RdYlBu_r, \"norm\": log_norm},\n)\nax1.set_title(\"True Background Conductivity\")\nax1.set_xlabel(\"x (m)\")\nax1.set_ylabel(\"z (m)\")\nax1.set_xlim([-1500, 1500])\nax1.set_ylim([topo_xyz[:, -1].max() - 1500, topo_xyz[:, -1].max()])\n\nax2 = fig.add_axes([0.84, 0.15, 0.03, 0.75])\ncbar = mpl.colorbar.ColorbarBase(\n    ax2, cmap=mpl.cm.RdYlBu_r, norm=log_norm, orientation=\"vertical\"\n)\ncbar.set_label(\"Conductivity [S/m]\", rotation=270, labelpad=15, size=12)","key":"XIwAurNosZ"},{"type":"output","id":"Hmx9vi9dzf4v1c4fvDVmV","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"78818a0ce52410273353ad70b0691900","path":"/user-tutorials/build/78818a0ce52410273353ad70b0691900.png"},"text/plain":{"content":"<Figure size 1000x450 with 2 Axes>","content_type":"text/plain"}}}],"key":"O8sJD2Gcj9"}],"key":"TPPVE3UfN4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mapping from the Model to the Mesh","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aBEVF0Jzvg"}],"identifier":"mapping-from-the-model-to-the-mesh","label":"Mapping from the Model to the Mesh","html_id":"mapping-from-the-model-to-the-mesh","implicit":true,"key":"MJUIwmJxre"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In SimPEG, the term ‘model’ is not synonymous with the physical property values defined on the mesh. For whatever model we choose, we must define a mapping from the set of model parameters (a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bpAAuMjPOD"},{"type":"link","url":"https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html#numpy.ndarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"1D numpy.ndarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"N0cUsKtjfB"}],"urlSource":"xref:numpy#numpy.ndarray","internal":false,"protocol":"xref:sphinx","key":"XLQ7FM7Swa"},{"type":"text","value":") to the physical property values of all cells in the mesh. Mappings are created using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UTlsnyYX6U"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.maps.IdentityMap.html#simpeg.maps.identitymap","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simpeg.maps","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lRJm9xivHr"}],"urlSource":"xref:simpeg#simpeg.maps.IdentityMap","internal":false,"protocol":"xref:sphinx","key":"Roq4szLZ4y"},{"type":"text","value":" module.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"y7VhiwK8au"}],"key":"QCtgiIkxbd"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"SimPEG uses a linearized formulation for simulating IP data; see ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"SOHWXMKEa0"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.electromagnetics.static.induced_polarization.Simulation2DCellCentered.html#simpeg.electromagnetics.static.induced_polarization.simulation2dcellcentered","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Simulation2DCellCentered","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NTeWMMnxvr"}],"urlSource":"xref:simpeg#simpeg.electromagnetics.static.induced_polarization.Simulation2DCellCentered","internal":false,"protocol":"xref:sphinx","key":"NeXPuPVOED"},{"type":"text","value":" or ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uPGuEfmuU4"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.electromagnetics.static.induced_polarization.Simulation2DNodal.html#simpeg.electromagnetics.static.induced_polarization.simulation2dnodal","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Simulation2DNodal","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DDKYt7ZF8s"}],"urlSource":"xref:simpeg#simpeg.electromagnetics.static.induced_polarization.Simulation2DNodal","internal":false,"protocol":"xref:sphinx","key":"vVFkOgiePH"},{"type":"text","value":". In this formulation, any standard definition of the chargeability can be inverted. And the units of the recovered chargeability values is the same as the data units; e.g. intrinsic chargeability (V/V or mV/V) or integrated chargeability (ms). If you are inverting secondary voltages however, the chargeability model must represent intrinsic chargeabilities (","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"TM1kG0HVxs"},{"type":"inlineMath","value":"0 \\leq \\eta \\leq 1","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>η</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\leq \\eta \\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>","key":"d3p9Eg6pTy"},{"type":"text","value":") in V/V.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"iGMbSeWrHI"}],"key":"kmcemieSd0"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In this tutorial,","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"EuIRcdmBs0"}],"key":"em1oHNnCYl"},{"type":"text","value":" the model parameters are the subsurface chargeabilities (","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"bHSdXeuvsy"},{"type":"inlineMath","value":"0 \\leq \\eta \\leq 1","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>η</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0 \\leq \\eta \\leq 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">η</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>","key":"ALdYhvhSEY"},{"type":"text","value":") in V/V. We use the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"GCQVU0vevs"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.maps.InjectActiveCells.html#simpeg.maps.injectactivecells","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"simpeg​.maps​.InjectActiveCells","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"vVJE8F8159"}],"urlSource":"xref:simpeg#simpeg.maps.InjectActiveCells","internal":false,"protocol":"xref:sphinx","key":"mXRxCdk9Io"},{"type":"text","value":" map to project the active cell chargeabilities to the entire mesh.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QKlnfgxYKr"}],"key":"glIfV32fNN"}],"key":"AqFd6BMMpl"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.854159Z","iopub.status.busy":"2025-05-23T16:56:55.853931Z","iopub.status.idle":"2025-05-23T16:56:55.861727Z","shell.execute_reply":"2025-05-23T16:56:55.861025Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Model parameters to all cells\nchargeability_map = maps.InjectActiveCells(mesh, active_cells, 0.0)","key":"d8T0WENJbc"},{"type":"output","id":"wqqfrI9-y02Qk17yULsCN","data":[],"key":"LJX5WYUfYF"}],"key":"yrAO9QzIbm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Starting/Reference Model for IP Inversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ivkiveu8nn"}],"identifier":"starting-reference-model-for-ip-inversion","label":"Starting/Reference Model for IP Inversion","html_id":"starting-reference-model-for-ip-inversion","implicit":true,"key":"qSDuUrP1RH"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here, we would create starting and/or reference models for the IP inversion as well as the mapping from the model space to the active cells. Starting and reference models can be a constant background value or contain a-priori structures. Here, the starting model is the 1e-6 V/V. It should be noted that the starting model ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xONs8BCOMO"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"cannot be vector of zeros,","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"W7BId2t6E6"}],"key":"sbdTXR88Zl"},{"type":"text","value":" otherwise the inversion will be unable to compute a gradient direction at the first iteration.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"L0tCPRi8h0"}],"key":"yBKOOt8ttt"}],"key":"u3SeIkynOO"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.864953Z","iopub.status.busy":"2025-05-23T16:56:55.864736Z","iopub.status.idle":"2025-05-23T16:56:55.868185Z","shell.execute_reply":"2025-05-23T16:56:55.867507Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Create starting model from log-conductivity\nstarting_chargeability_model = 1e-4 * np.ones(n_active)\n\n# Zero reference conductivity model\nreference_chargeability_model = np.zeros_like(starting_chargeability_model)","key":"Ph6pP5wRNo"},{"type":"output","id":"U5gxBM8t0tBxDCdRUp8Gt","data":[],"key":"WbDonnavuo"}],"key":"YKxEX0sKXx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Forward Simulation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"u7nxJA9L9a"}],"identifier":"define-the-forward-simulation","label":"Define the Forward Simulation","html_id":"define-the-forward-simulation","implicit":true,"key":"KqSyXayhAt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"A simulation object defining the forward problem is required in order to predict data and calculate misfits for recovered models. A comprehensive description of the simulation object for 3D IP was discussed in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DfQ57cxd5T"},{"type":"link","url":"fwd_dcip_3d.ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"3D IP Forward Simulation","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZgUt1GuhFl"}],"urlSource":"fwd_dcip_3d.ipynb","key":"azfBZLqSW6"},{"type":"text","value":" tutorial. Here, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hinNxrRKKP"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.electromagnetics.static.induced_polarization.Simulation3DNodal.html#simpeg.electromagnetics.static.induced_polarization.simulation3dnodal","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Simulation3DNodal","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YD5einSLa9"}],"urlSource":"xref:simpeg#simpeg.electromagnetics.static.induced_polarization.Simulation3DNodal","internal":false,"protocol":"xref:sphinx","key":"oHxRUxD4pm"},{"type":"text","value":" simulation which solves for the electric potential on mesh nodes.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"myTpJ3zGFu"}],"key":"ES8ugAmjgA"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Since we are using a background ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GbMKk2xzmP"},{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"conductivity","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"sOgmlwcKdf"}],"key":"yPxaFy27ha"},{"type":"text","value":" model, we use ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"N9slncXl4T"},{"type":"inlineCode","value":"sigma","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vcya5OWiXJ"},{"type":"text","value":" to define the background conductivity on the entire mesh. Because the IP problem has been linearized, we store the sensitivities for the inversion using ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"EYXfMaQFhN"},{"type":"inlineCode","value":"storeJ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PrCU44g1wF"},{"type":"text","value":".","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"ytxxjdHwYw"}],"key":"txGQ0ff9Cv"}],"key":"s9QoMT0sDT"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:55.870971Z","iopub.status.busy":"2025-05-23T16:56:55.870702Z","iopub.status.idle":"2025-05-23T16:56:56.364955Z","shell.execute_reply":"2025-05-23T16:56:56.364214Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"simulation_L2 = ip.Simulation3DNodal(\n    mesh,\n    survey=ip_data.survey,\n    sigma=conductivity_map * conductivity_model,\n    etaMap=chargeability_map,\n    storeJ=True,\n)","key":"fTrQppQMhh"},{"type":"output","id":"_S1vdjISsvvsvn3iTerrW","data":[],"key":"IYf4Q5Xkz9"}],"key":"x1Evbxneqy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Data Misfit","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"K6PW3cDK6d"}],"identifier":"define-the-data-misfit","label":"Define the Data Misfit","html_id":"define-the-data-misfit","implicit":true,"key":"pfDOyWd6SI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"To understand the role of the data misfit in the inversion, please visit ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XgPnqEaPlk"},{"type":"link","url":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/Uncertainties.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this online resource","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"q2dpxcZjS1"}],"urlSource":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/Uncertainties.html","key":"eMUT7pFgYe"},{"type":"text","value":".\nHere, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AlBBTt9CX6"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.data_misfit.L2DataMisfit.html#simpeg.data_misfit.l2datamisfit","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"L2DataMisfit","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vUy8kPrhqt"}],"urlSource":"xref:simpeg#simpeg.data_misfit.L2DataMisfit","internal":false,"protocol":"xref:sphinx","key":"U2TuhojDDM"},{"type":"text","value":" class to define the data misfit. In this case, the data misfit is the L2 norm of the weighted residual between the observed data and the data predicted for a given model. When instantiating the data misfit object within SimPEG, we must assign an appropriate ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zZYycr3fik"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"data object","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QCDUxDKSWj"}],"key":"AvjKEdkhlM"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"J2Zwhdgyf5"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"simulation object","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jI2C6m7KjL"}],"key":"YlXcADmjQA"},{"type":"text","value":" as properties.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WT6Ivy96sn"}],"key":"qPETLOfnZJ"}],"key":"PhPR0zl1x1"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:56.368287Z","iopub.status.busy":"2025-05-23T16:56:56.367975Z","iopub.status.idle":"2025-05-23T16:56:56.371318Z","shell.execute_reply":"2025-05-23T16:56:56.370807Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dmis_L2 = data_misfit.L2DataMisfit(simulation=simulation_L2, data=ip_data)","key":"aQ5G4788LX"},{"type":"output","id":"M-CJ6BxuOAqgYvkh-8tra","data":[],"key":"CWuEMzKwbO"}],"key":"fSQEU8mkpa"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Regularization","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fEkj4gERFa"}],"identifier":"define-the-regularization","label":"Define the Regularization","html_id":"define-the-regularization","implicit":true,"key":"qapg5WOSWa"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"To understand the role of the regularization in the inversion, please visit ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qBYnPiL4g2"},{"type":"link","url":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/ObjectiveFunction.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"this online resource","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"djTcIZDqwp"}],"urlSource":"https://giftoolscookbook.readthedocs.io/en/latest/content/fundamentals/ObjectiveFunction.html","key":"bOYxkPTqu2"},{"type":"text","value":". Here, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XxwxHE6OGZ"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.regularization.WeightedLeastSquares.html#simpeg.regularization.weightedleastsquares","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"WeightedLeastSquares","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B54r7K2GrR"}],"urlSource":"xref:simpeg#simpeg.regularization.WeightedLeastSquares","internal":false,"protocol":"xref:sphinx","key":"krHZAhZrX8"},{"type":"text","value":" regularization class to constrain the inversion result. Length scales along x, y and z are used to balance the smallness and smoothness terms. And the reference model is only applied to the smallness term; which is redundant for the tutorial example since we have set the reference model to an array of zeros.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p5v5fa021l"}],"key":"UelzC5wAZV"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"By default, the regularization acts on the model parameters; which in the case are the log-conductivities of the active cells. So we need to specify which cells are active in the regularization. And if we wanted to apply the regularization to a function of the model parameters, we would need to set an approprate mapping object using the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"JXJgq1Lwph"},{"type":"inlineCode","value":"mapping","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"lAOIvCj9ZA"},{"type":"text","value":" keyword argument.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jOo9AK7BOi"}],"key":"SBydiew17a"}],"key":"A8XrM6n6RO"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:56.374585Z","iopub.status.busy":"2025-05-23T16:56:56.374312Z","iopub.status.idle":"2025-05-23T16:56:56.814401Z","shell.execute_reply":"2025-05-23T16:56:56.813667Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"reg_L2 = regularization.WeightedLeastSquares(\n    mesh,\n    active_cells=active_cells,\n    length_scale_x=10.0,\n    length_scale_y=10.0,\n    length_scale_z=10.0,\n    reference_model=reference_chargeability_model,\n    reference_model_in_smooth=False,\n)","key":"I76fOWjbPc"},{"type":"output","id":"KeqcXctHC-SbazJILeP3O","data":[],"key":"hEdv9fkDdx"}],"key":"TxrnCgbE4D"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Optimization Algorithm","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zvHGv7WzGh"}],"identifier":"define-the-optimization-algorithm","label":"Define the Optimization Algorithm","html_id":"define-the-optimization-algorithm","implicit":true,"key":"RIGPRPWN7p"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here, we use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Hh9TE9Qooa"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.optimization.ProjectedGNCG.html#simpeg.optimization.projectedgncg","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"ProjectedGNCG","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Qny42mCTjV"}],"urlSource":"xref:simpeg#simpeg.optimization.ProjectedGNCG","internal":false,"protocol":"xref:sphinx","key":"O7rgAkkx4K"},{"type":"text","value":" class to solve the optimization problem using projected Gauss-Newton with conjugate gradietn solver. Reasonable default values have generally been set for the properties of each optimization class. However, the user may choose to set custom values; e.g. the accuracy tolerance for the conjugate gradient solver or the number of line searches. Here, the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cRPOqH0KMm"},{"type":"inlineCode","value":"lower","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PBjaJRtsPO"},{"type":"text","value":" property is set to 0 to ensure recovered chargeability values are positive.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FqRlvUPCd1"}],"key":"wNuRbGJcxm"}],"key":"g7nmet2R8a"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:56.818173Z","iopub.status.busy":"2025-05-23T16:56:56.817924Z","iopub.status.idle":"2025-05-23T16:56:56.821399Z","shell.execute_reply":"2025-05-23T16:56:56.820880Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"opt_L2 = optimization.ProjectedGNCG(\n    maxIter=40, lower=0.0, maxIterLS=20, maxIterCG=20, tolCG=1e-2\n)","key":"I3dVXlhzc1"},{"type":"output","id":"67PoAnkL8OgxObP_Qntd9","data":[],"key":"ZWcYDqwItP"}],"key":"D2sUYZwBb3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define the Inverse Problem","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"S0lhcrtuKr"}],"identifier":"define-the-inverse-problem","label":"Define the Inverse Problem","html_id":"define-the-inverse-problem","implicit":true,"key":"FDr0axU0PT"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We use the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KblQ5a6GzU"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.inverse_problem.BaseInvProblem.html#simpeg.inverse_problem.baseinvproblem","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"BaseInvProblem","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Clq5l0qScQ"}],"urlSource":"xref:simpeg#simpeg.inverse_problem.BaseInvProblem","internal":false,"protocol":"xref:sphinx","key":"TYd8bxmVTG"},{"type":"text","value":" class to fully define the inverse problem that is solved at each beta (trade-off parameter) iteration. The inverse problem requires appropriate ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Pzylp1MSPz"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"data misfit","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JYnwc8ZnNj"}],"key":"iiMk7nQ1fq"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UNr3EFK7vO"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"regularization","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"E1DWJ0Syh8"}],"key":"udQAlVeu79"},{"type":"text","value":" and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZCu40FoXyr"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"optimization","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"njSmrhL9Xk"}],"key":"YXwsTqaPsw"},{"type":"text","value":" objects.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HxjtHg50Jz"}],"key":"jj10Sh8iLg"}],"key":"WMYzlghItJ"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:56.824768Z","iopub.status.busy":"2025-05-23T16:56:56.824490Z","iopub.status.idle":"2025-05-23T16:56:56.828639Z","shell.execute_reply":"2025-05-23T16:56:56.827895Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"inv_prob_L2 = inverse_problem.BaseInvProblem(dmis_L2, reg_L2, opt_L2)","key":"QuAdUdIe6b"},{"type":"output","id":"JkYRBpv3gtY_xRqt62z7z","data":[],"key":"GRWTFRpcLD"}],"key":"kndiBpWAsF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Provide Inversion Directives","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HOKA2g9AVI"}],"identifier":"provide-inversion-directives","label":"Provide Inversion Directives","html_id":"provide-inversion-directives","implicit":true,"key":"gQ7uVzfblx"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Directives represent operations that are applied while the inversion is running. Here, we apply common directives for weighted least-squares inversion of IP data and describe their roles. These are:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MBlCXZdt9l"}],"key":"OZqdM6Urfy"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.UpdateSensitivityWeights.html#simpeg.directives.updatesensitivityweights","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"UpdateSensitivityWeights","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bJn31r3gWk"}],"urlSource":"xref:simpeg#simpeg.directives.UpdateSensitivityWeights","internal":false,"protocol":"xref:sphinx","key":"BhsdqnaX8c"},{"type":"text","value":": Apply sensitivity weighting to counteract the natural tendency of IP inversion to place materials near the electrodes. Since the IP problem has been linearized, we do not need to update the sensitivities and we set ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Vx2RoyGck4"},{"type":"inlineCode","value":"every_iteration=False","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xhM1ajhPCy"},{"type":"text","value":". For IP inversion, we do not want to use the entire dynamic range of the sensitivities to generate our weighting. So we generally set ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"aqFf4gpyQv"},{"type":"inlineCode","value":"threshold_value","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"r82JDEsEsm"},{"type":"text","value":" to a value betwewen 1e-4 and 1e-1.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"MpCvER5WoN"}],"key":"GDfrxeKzcs"}],"key":"y3Y7hxUhUi"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.UpdatePreconditioner.html#simpeg.directives.updatepreconditioner","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"UpdatePreconditioner","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"T7lxKOF0Y4"}],"urlSource":"xref:simpeg#simpeg.directives.UpdatePreconditioner","internal":false,"protocol":"xref:sphinx","key":"LT2Eslvki2"},{"type":"text","value":": Apply Jacobi preconditioner when solving optimization problem to reduce the number of conjugate gradient iterations. We set ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"knRN5Gq3JM"},{"type":"inlineCode","value":"update_every_iteration=False","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"LbHxAAOYDi"},{"type":"text","value":" because the ideal preconditioner because the forward problem and regularization are not model-dependent.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"iBY0i5skXT"}],"key":"WxPgc4ah3B"}],"key":"LVe7NvAAsF"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.BetaEstimate_ByEig.html#simpeg.directives.betaestimate_byeig","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"BetaEstimate_ByEig","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"i29oqAbXXe"}],"urlSource":"xref:simpeg#simpeg.directives.BetaEstimate_ByEig","internal":false,"protocol":"xref:sphinx","key":"UhICUtFtx7"},{"type":"text","value":": Compute and set starting trade-off parameter (beta) based on largest eigenvalues.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"li09QYKBqd"}],"key":"C8jTQ247di"}],"key":"eCD5y67qFn"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.BetaSchedule.html#simpeg.directives.betaschedule","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"BetaSchedule","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Kaw0gbwXPy"}],"urlSource":"xref:simpeg#simpeg.directives.BetaSchedule","internal":false,"protocol":"xref:sphinx","key":"VUmY4uksol"},{"type":"text","value":": Size reduction of the trade-off parameter at every beta iteration, and the number of Gauss-Newton iterations for each beta. In general, a ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"JYxJDQ2TCy"},{"type":"inlineCode","value":"coolingFactor","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"bHeTo9ACvP"},{"type":"text","value":" between 1.5 and 2.5, and ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"RFQLOfVWaE"},{"type":"inlineCode","value":"coolingRate","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"z9zhDPPfp0"},{"type":"text","value":" of 2 or 3 works well for DC resistivity inversion. Cooling beta too quickly will result in portions of the model getting trapped in local minima. And we will not be finding the solution that minimizes the optimization problem if the cooling rate is too small.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"EIejUwliMy"}],"key":"lL4VXGRQHv"}],"key":"pW78jXLRru"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.directives.TargetMisfit.html#simpeg.directives.targetmisfit","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"TargetMisfit","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"U4kFzsj5XT"}],"urlSource":"xref:simpeg#simpeg.directives.TargetMisfit","internal":false,"protocol":"xref:sphinx","key":"pB4r6hDIyM"},{"type":"text","value":": Terminates the inversion when the data misfit equals the target misfit. A ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"EBcFcDn2AN"},{"type":"inlineCode","value":"chifact=1","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ZTvsu9FOjf"},{"type":"text","value":" terminates the inversion when the data misfit equals the number of data.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"MXdSkMFaOi"}],"key":"xIPaaYPMkz"}],"key":"qzCLL6yC6X"}],"key":"YQfUhCSFab"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"The directive objects are organized in a ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"jVwncYuHJv"},{"type":"inlineCode","value":"list","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"ahOxcqT1X0"},{"type":"text","value":". Upon starting the inversion or updating the recovered model at each iteration, the inversion will call each directive within the list ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"iKIvjAFXjv"},{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"in order","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"pX1dyNYsC8"}],"key":"v63nLdysmh"},{"type":"text","value":". The order of the directives matters, and SimPEG will throw an error if directives are organized into an improper order. Some directives, like the ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"J7RnWIo1iP"},{"type":"inlineCode","value":"BetaEstimate_ByEig","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"i2PCouksaV"},{"type":"text","value":" are only used when starting the inversion. Other directives, like ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"aSZUSZln2s"},{"type":"inlineCode","value":"UpdatePreconditionner","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"Wt664RFH2I"},{"type":"text","value":", are used whenever the model is updated.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"rHYE9Jlkva"}],"key":"yRQu8vWqjy"}],"key":"eh0S96M6sb"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:56.831196Z","iopub.status.busy":"2025-05-23T16:56:56.830837Z","iopub.status.idle":"2025-05-23T16:56:56.835879Z","shell.execute_reply":"2025-05-23T16:56:56.835269Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"sensitivity_weights = directives.UpdateSensitivityWeights(\n    every_iteration=False, threshold_value=1e-2\n)\nupdate_jacobi = directives.UpdatePreconditioner(update_every_iteration=True)\nstarting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1000)\nbeta_schedule = directives.BetaSchedule(coolingFactor=2.0, coolingRate=2)\ntarget_misfit = directives.TargetMisfit(chifact=1.0)\n\ndirectives_list_L2 = [\n    sensitivity_weights,\n    update_jacobi,\n    starting_beta,\n    beta_schedule,\n    target_misfit,\n]","key":"bjYcSK49uD"},{"type":"output","id":"ju6x1SeFHkrZyb1MZSrBc","data":[],"key":"jNvercQpVT"}],"key":"M3y8wC4qBM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Define and Run the Inversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YM9qcSVxku"}],"identifier":"define-and-run-the-inversion","label":"Define and Run the Inversion","html_id":"define-and-run-the-inversion","implicit":true,"key":"x63IMq4Kll"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We define the inversion using the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"PfN4IHZZ8N"},{"type":"link","url":"https://docs.simpeg.xyz/latest/content/api/generated/simpeg.inversion.BaseInversion.html#simpeg.inversion.baseinversion","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"BaseInversion","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gf7FNYMQXa"}],"urlSource":"xref:simpeg#simpeg.inversion.BaseInversion","internal":false,"protocol":"xref:sphinx","key":"FkkWe3HWse"},{"type":"text","value":" class. The inversion class must be instantiated with an appropriate ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"AL3RDXC34O"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"inverse problem","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gow7mtXcnM"}],"key":"kJid8YYu3C"},{"type":"text","value":" object and ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jVxMmMGr6U"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"directives list","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nEYY1ls7tW"}],"key":"L1MQccjiyE"},{"type":"text","value":". The ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"b8MVeYKvjU"},{"type":"inlineCode","value":"run","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xaM3QgQbdh"},{"type":"text","value":" method, along with a starting model, is respondible for running the inversion. The output is a 1D numpy.ndarray containing the recovered model parameters","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bTLMhLE6f8"}],"key":"lsjTd1tsfz"}],"key":"RjfUjZTtIH"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:56:56.838296Z","iopub.status.busy":"2025-05-23T16:56:56.838034Z","iopub.status.idle":"2025-05-23T16:58:07.570629Z","shell.execute_reply":"2025-05-23T16:58:07.569838Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Here we combine the inverse problem and the set of directives\ninv_L2 = inversion.BaseInversion(inv_prob_L2, directives_list_L2)\n\n# Run the inversion\nrecovered_chargeability_L2 = inv_L2.run(starting_chargeability_model)","key":"RUlnofU1iY"},{"type":"output","id":"T_2R-hbCahGxRbVp7dwv0","data":[{"name":"stdout","output_type":"stream","text":"\nRunning inversion with SimPEG v0.24.0\n\n                        simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.\n                        ***Done using same Solver, and solver_opts as the Simulation3DNodal problem***\n                        \n"},{"name":"stderr","output_type":"stream","text":"/t40array/ssoler/miniforge3/envs/simpeg-user-tutorials/lib/python3.12/site-packages/simpeg/base/pde_simulation.py:490: DefaultSolverWarning: Using the default solver: Pardiso. \n\nIf you would like to suppress this notification, add \nwarnings.filterwarnings('ignore', simpeg.utils.solver_utils.DefaultSolverWarning)\n to your script.\n  return get_default_solver(warn=True)\n"},{"name":"stderr","output_type":"stream","text":"/t40array/ssoler/miniforge3/envs/simpeg-user-tutorials/lib/python3.12/site-packages/pymatsolver/solvers.py:415: FutureWarning: In Future pymatsolver v0.4.0, passing a vector of shape (n, 1) to the solve method will return an array with shape (n, 1), instead of always returning a flattened array. This is to be consistent with numpy.linalg.solve broadcasting.\n  return self.solve(val)\n"},{"name":"stdout","output_type":"stream","text":"model has any nan: 0\n=============================== Projected GNCG ===============================\n  #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   \n-----------------------------------------------------------------------------\nx0 has any nan: 0\n"},{"name":"stdout","output_type":"stream","text":"   0  7.91e-01  1.67e+03  1.32e+01  1.68e+03    2.87e+03      0              \n"},{"name":"stdout","output_type":"stream","text":"   1  7.91e-01  1.28e+03  1.99e+02  1.44e+03    1.21e+03      0              \n"},{"name":"stdout","output_type":"stream","text":"   2  3.96e-01  1.28e+03  1.88e+02  1.36e+03    1.24e+03      0              \n"},{"name":"stdout","output_type":"stream","text":"   3  3.96e-01  1.13e+03  4.61e+02  1.31e+03    4.96e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   4  1.98e-01  1.13e+03  4.57e+02  1.22e+03    9.33e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   5  1.98e-01  9.92e+02  9.62e+02  1.18e+03    2.02e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   6  9.89e-02  9.93e+02  9.59e+02  1.09e+03    7.42e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   7  9.89e-02  8.76e+02  1.80e+03  1.05e+03    2.16e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   8  4.94e-02  8.77e+02  1.80e+03  9.65e+02    5.97e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   9  4.94e-02  7.84e+02  3.13e+03  9.39e+02    1.04e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  10  2.47e-02  7.85e+02  3.12e+03  8.62e+02    4.71e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  11  2.47e-02  7.13e+02  5.22e+03  8.42e+02    7.18e+01      0              \n"},{"name":"stdout","output_type":"stream","text":"  12  1.24e-02  7.14e+02  5.18e+03  7.78e+02    3.74e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"------------------------- STOP! -------------------------\n1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 1.6814e+02\n0 : |xc-x_last| = 2.3741e-01 <= tolX*(1+|x0|) = 1.0267e-01\n0 : |proj(x-g)-x|    = 3.7356e+02 <= tolG          = 1.0000e-01\n0 : |proj(x-g)-x|    = 3.7356e+02 <= 1e3*eps       = 1.0000e-02\n0 : maxIter   =      40    <= iter          =     13\n------------------------- DONE! -------------------------\n"}],"key":"DzHqLyLEsZ"}],"key":"JkOPmGpCIa"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Analyze Inversion Outputs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QdGARiViNZ"}],"identifier":"analyze-inversion-outputs","label":"Analyze Inversion Outputs","html_id":"analyze-inversion-outputs","implicit":true,"key":"RFZfyu837Z"}],"key":"LPgiYG2Hu6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Normalized Data Misfit in 3D Pseudosection","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uEElhx3CAJ"}],"identifier":"plot-normalized-data-misfit-in-3d-pseudosection","label":"Plot Normalized Data Misfit in 3D Pseudosection","html_id":"plot-normalized-data-misfit-in-3d-pseudosection","implicit":true,"key":"ufyPPw737G"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"To see how well the recovered model reproduces the observed data, it is a good idea to compare the predicted and observed data.\nHere, we plot the normalized data misfit to determine whether the observed data are fit evenly. Correlated signatures in the normalized data misfits indicate we are overfitting/underfitting certain data. And that we must modify our uncertainties and re-run the inversion.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rwJGGYpGtB"}],"key":"k5vn1zti6d"}],"key":"cAQDy3g7k2"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:58:07.574010Z","iopub.status.busy":"2025-05-23T16:58:07.573242Z","iopub.status.idle":"2025-05-23T16:58:07.581073Z","shell.execute_reply":"2025-05-23T16:58:07.580365Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Predicted data from recovered model\ndpred_ip = inv_prob_L2.dpred\n\n# Compute the normalized data misfit\nip_normalized_misfit = (ip_data.dobs - dpred_ip) / ip_data.standard_deviation\n\nif has_plotly:\n    fig = plot_3d_pseudosection(\n        ip_data.survey,\n        ip_normalized_misfit,\n        scale=\"linear\",\n        units=\"\",\n        vlim=[-2.5, 2.5],\n        marker_opts={\"colorscale\": \"RdYlBu\"},\n    )\n\n    fig.update_layout(\n        title_text=\"Normalized Data Misfit\",\n        title_x=0.5,\n        title_font_size=24,\n        width=650,\n        height=500,\n        scene_camera=dict(\n            center=dict(x=0, y=0, z=-0.4), eye=dict(x=1.5, y=-1.5, z=1.8)\n        ),\n    )\n\n    #     plotly.io.show(fig)\n    html_str = plotly.io.to_html(fig)\n    display(HTML(html_str))\n\nelse:\n    print(\"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\")","key":"dmOITLUhK9"},{"type":"output","id":"WAY37rbhdEtpmehtp0Mz4","data":[{"name":"stdout","output_type":"stream","text":"INSTALL 'PLOTLY' TO VISUALIZE 3D PSEUDOSECTIONS\n"}],"key":"VXZfLwNjk4"}],"key":"DRu9fTojX4"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot 2D Pseudsections for Individual Survey Lines","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nz5XhwChfQ"}],"identifier":"plot-2d-pseudsections-for-individual-survey-lines","label":"Plot 2D Pseudsections for Individual Survey Lines","html_id":"plot-2d-pseudsections-for-individual-survey-lines","implicit":true,"key":"fAyiHj0KrC"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"For large datasets comprised of many survey lines, interpretation can be challenging if we plot every datum. Here, we plot the observed data, predicted data and data misfit for a specified survey line.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Y2XY9gXwhB"}],"key":"bBcvF6VJvJ"}],"key":"uHc4iCQ9OE"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:58:07.583883Z","iopub.status.busy":"2025-05-23T16:58:07.583468Z","iopub.status.idle":"2025-05-23T16:58:08.144333Z","shell.execute_reply":"2025-05-23T16:58:08.143372Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Data associated with the line index provided\nline_index = 0\nk = lineID == line_index + 1\ndata_array = [\n    np.abs(ip_data.dobs[k]),\n    np.abs(dpred_ip[k]),\n    ip_data.dobs[k] - dpred_ip[k],\n]\n\n# Plot 2D pseudosections (observed, predicted, normalized misfit)\nfig = plt.figure(figsize=(9, 11))\nplot_title = [\"Observed\", \"Predicted\", \"Misfit\"]\nplot_units = [\"V/V\", \"V/V\", \"V/V\"]\nscale = [\"linear\", \"linear\", \"linear\"]\ncmap_list = [mpl.cm.plasma, mpl.cm.plasma, mpl.cm.RdYlBu]\n\nax1 = 3 * [None]\ncax1 = 3 * [None]\ncbar = 3 * [None]\ncplot = 3 * [None]\n\nfor ii in range(0, 3):\n    ax1[ii] = fig.add_axes([0.15, 0.72 - 0.33 * ii, 0.65, 0.21])\n    cax1[ii] = fig.add_axes([0.81, 0.72 - 0.33 * ii, 0.03, 0.21])\n    cplot[ii] = plot_pseudosection(\n        survey_2d_list[line_index],\n        data_array[ii],\n        \"contourf\",\n        ax=ax1[ii],\n        cax=cax1[ii],\n        scale=scale[ii],\n        cbar_label=plot_units[ii],\n        mask_topography=True,\n        contourf_opts={\"levels\": 25, \"cmap\": cmap_list[ii]},\n    )\n    ax1[ii].set_title(plot_title[ii])\n\nplt.show()","key":"dNQeNWaxnu"},{"type":"output","id":"G3J_vVuv8COHmHpPqudOl","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4bbe720b92ec5b62c3fc6b5fbe5b4cce","path":"/user-tutorials/build/4bbe720b92ec5b62c3fc6b5fbe5b4cce.png"},"text/plain":{"content":"<Figure size 900x1100 with 6 Axes>","content_type":"text/plain"}}}],"key":"WX7FxI8cSd"}],"key":"Zf7YEgvOw1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot True and Recovered Chargeability Models","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pGLXD83Qiu"}],"identifier":"plot-true-and-recovered-chargeability-models","label":"Plot True and Recovered Chargeability Models","html_id":"plot-true-and-recovered-chargeability-models","implicit":true,"key":"xUEbzi2o9I"}],"key":"Cs9vBhO354"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:58:08.147205Z","iopub.status.busy":"2025-05-23T16:58:08.146950Z","iopub.status.idle":"2025-05-23T16:58:08.154257Z","shell.execute_reply":"2025-05-23T16:58:08.153249Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define intrinsic chargeability model (V/V)\nair_value = 0.0\nbackground_value = 1e-6\nchargeable_value = 0.1\n\n# Define true chargeability model\ntrue_chargeability_model = background_value * np.ones(n_active)\n\nind_chargeable = model_builder.get_indices_sphere(\n    np.r_[-300.0, 0.0, 100.0], 165.0, mesh.cell_centers[active_cells, :]\n)\n\ntrue_chargeability_model[ind_chargeable] = chargeable_value","key":"gNP1FkMLde"},{"type":"output","id":"Ibb88D97_pW4R82nnsuvu","data":[],"key":"wf0yK7Jz7n"}],"key":"FPG63CRVh6"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:58:08.157165Z","iopub.status.busy":"2025-05-23T16:58:08.156912Z","iopub.status.idle":"2025-05-23T16:58:08.613599Z","shell.execute_reply":"2025-05-23T16:58:08.612643Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(9, 9))\nax1 = 2 * [None]\nax2 = 2 * [None]\ncbar = 2 * [None]\nnorm = 2 * [None]\ntitle_str = [\n    \"True Chargeability Model\",\n    \"Recovered Chargeability (L2)\",\n]\n\nfor ii, m in enumerate([true_chargeability_model, recovered_chargeability_L2]):\n    norm[ii] = Normalize(vmin=0.0, vmax=np.max(m))\n\n    ax1[ii] = fig.add_axes([0.14, 0.6 - 0.5 * ii, 0.68, 0.35])\n\n    mesh.plot_slice(\n        plotting_map * m,\n        ax=ax1[ii],\n        normal=\"Y\",\n        ind=int(len(mesh.h[1]) / 2),\n        grid=False,\n        pcolor_opts={\"cmap\": mpl.cm.plasma, \"norm\": norm[ii]},\n    )\n    ax1[ii].set_title(title_str[ii])\n    ax1[ii].set_xlabel(\"x (m)\")\n    ax1[ii].set_ylabel(\"z (m)\")\n    ax1[ii].set_xlim([-1500, 1500])\n    ax1[ii].set_ylim([topo_xyz[:, -1].max() - 1500, topo_xyz[:, -1].max()])\n\n    ax2[ii] = fig.add_axes([0.84, 0.6 - 0.5 * ii, 0.03, 0.35])\n    cbar[ii] = mpl.colorbar.ColorbarBase(\n        ax2[ii], norm=norm[ii], orientation=\"vertical\", cmap=mpl.cm.plasma\n    )\n    cbar[ii].set_label(r\"$\\sigma$ (S/m)\", rotation=270, labelpad=15, size=12)","key":"Mtr4LmE1x9"},{"type":"output","id":"OqAsCYPuPZRuZCELMQEh8","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"c147fdc8798234ff39554c83da1369e9","path":"/user-tutorials/build/c147fdc8798234ff39554c83da1369e9.png"},"text/plain":{"content":"<Figure size 900x900 with 4 Axes>","content_type":"text/plain"}}}],"key":"SwmjTkbeZc"}],"key":"kG5QjNbj80"}],"key":"yP81rQWe8n"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"2.5D IP Inversion","url":"/inv-ip-2d","group":"SimPEG User Tutorials"},"next":{"title":"Frequency-Domain Electromagnetics","url":"/fdem-index","group":"SimPEG User Tutorials"}}},"domain":"http://localhost:3000"}