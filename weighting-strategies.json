{"version":2,"kind":"Notebook","sha256":"50fac606170c209ceb7aed985435b42f1f16e45d0792469883a7e4b729b2c56a","slug":"weighting-strategies","location":"/notebooks/03-gravity/weighting_strategies.ipynb","dependencies":[],"frontmatter":{"title":"Compare weighting strategy with Inversion of surface Gravity Anomaly Data","authors":[{"id":"thibautastic","nameParsed":{"literal":"Thibaut Astic","given":"Thibaut","family":"Astic"},"name":"Thibaut Astic","roles":["Writing – original draft"],"affiliations":["kobold"]}],"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/simpeg/user-tutorials","subject":"SimPEG User Tutorials","keywords":["geophysics","inversions","python","open-source"],"affiliations":[{"id":"kobold","name":"Kobold Metals"},{"id":"ubc","name":"University of British Columbia","department":"Department of Earth, Ocean and Atmospheric Sciences","address":"2020 – 2207 Main Mall","city":"Vancouver","state":"British Columbia","postal_code":"V6T 1Z4","country":"Canada","isni":"0000 0001 2288 9830","ror":"https://ror.org/03rmrcq20","phone":"604 822 2449"}],"numbering":{"title":{"offset":1}},"source_url":"https://github.com/simpeg/user-tutorials/blob/main/notebooks/03-gravity/weighting_strategies.ipynb","edit_url":"https://github.com/simpeg/user-tutorials/edit/main/notebooks/03-gravity/weighting_strategies.ipynb","exports":[{"format":"ipynb","filename":"weighting_strategies.ipynb","url":"/user-tutorials/build/weighting_strategies-f8038fc464c9a72f6ee1a4fc03e720ec.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Intermediate notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WLHOkh1A3V"}],"key":"TEdSS6UTGx"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This tutorial focusses on intermediate level functionality within SimPEG. Basic functionality within SimPEG is not discussed in detail, as we assume the user is already familiar.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RNuX5pc2bt"}],"key":"R3TXXWCiWK"}],"class":"caution","key":"IARhm9E01x"}],"key":"tvjJgTyGRi"},{"type":"block","kind":"notebook-content","children":[{"type":"admonition","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Light-weight notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tOpWJbexpg"}],"key":"iz5SqgOpxa"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"This tutorial requires minimal computational resources and can be executed quickly in the background while other computer processes are running.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hQdxsOh4eO"}],"key":"q44OU973VK"}],"class":"hint","key":"tbTWbXMzid"}],"key":"Xn9jzAoWct"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"\"\"\""},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here we invert gravity anomaly data to recover a density contrast model. We formulate the inverse problem as an iteratively\nre-weighted least-squares (IRLS) optimization problem. For this tutorial, we\nfocus on the following:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OGa6YTRqBz"}],"key":"QKzanvVf13"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Setting regularization weights","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"FvzdOm30HR"}],"key":"C2rdNc76sT"}],"key":"Vy464nV5Bu"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Defining the survey from xyz formatted data","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"kFuwWAjDGz"}],"key":"Cn97G5Wu6m"}],"key":"h7gpcQuBZi"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Generating a mesh based on survey geometry","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"OYXSO2y77C"}],"key":"XYsvFJkSVa"}],"key":"svOvPK1iJF"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Including surface topography","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"hW1BsZJDQ5"}],"key":"nGdB176bfT"}],"key":"Xf78h0R6q3"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Defining the inverse problem (data misfit, regularization, optimization)","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"ktWiE03Xm8"}],"key":"UQE5uVXsVu"}],"key":"n6fDTR7ElA"},{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Specifying directives for the inversion","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"vIKKmGS24I"}],"key":"xDTBl8V4AB"}],"key":"wuhWPPLVQs"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Setting sparse and blocky norms","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"n0AN1KCl0h"}],"key":"HeexfKzonX"}],"key":"hIcF5wiJjL"},{"type":"listItem","spread":true,"position":{"start":{"line":12,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Plotting the recovered model and data misfit","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"jtOxrKtxjp"}],"key":"klEeob0cMh"}],"key":"W4XeFH6n9L"}],"key":"yGgTvGwsAU"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Although we consider gravity anomaly data in this tutorial, the same approach\ncan be used to invert gradiometry and other types of geophysical data.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"qx0OjIsRST"}],"key":"xxUxkjuPqa"}],"key":"H1t0homLf7"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#########################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Import modules","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VgtuoMrzpC"}],"identifier":"import-modules","label":"Import modules","html_id":"import-modules","implicit":true,"key":"CjItW4UvgE"}],"key":"yskdnEuxpP"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:31.480131Z","iopub.status.busy":"2025-05-23T16:23:31.479613Z","iopub.status.idle":"2025-05-23T16:23:33.528935Z","shell.execute_reply":"2025-05-23T16:23:33.527920Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport tarfile\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom discretize import TensorMesh\nfrom discretize.utils import active_from_xyz\n\nfrom simpeg import (\n    data,\n    data_misfit,\n    directives,\n    inverse_problem,\n    inversion,\n    maps,\n    optimization,\n    regularization,\n    utils,\n)\nfrom simpeg.potential_fields import gravity\nfrom simpeg.utils import model_builder, plot2Ddata","key":"LhPsydUEdJ"},{"type":"output","id":"TNmdc_W6rKTqZxo6tjkxX","data":[],"key":"ag36SXpPlD"}],"key":"QikU6OqK2N"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Define File Names","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vCbWumVnBv"}],"identifier":"define-file-names","label":"Define File Names","html_id":"define-file-names","implicit":true,"key":"EsQ91GV0Nc"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"File paths for assets we are loading. To set up the inversion, we require\ntopography and field observations. The true model defined on the whole mesh\nis loaded to compare with the inversion result. These files are stored as a\ntar-file on our google cloud bucket:\n“","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"xYB99dx8li"},{"type":"link","url":"https://storage.googleapis.com/simpeg/doc-assets/gravity.tar.gz","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"https://​storage​.googleapis​.com​/simpeg​/doc​-assets​/gravity​.tar​.gz","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ryt4YTrFxc"}],"urlSource":"https://storage.googleapis.com/simpeg/doc-assets/gravity.tar.gz","key":"h9EjqN8l9U"},{"type":"text","value":"”","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"St2w1HBuwn"}],"key":"VhazLcxZ0v"}],"key":"qIovAwpXXr"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:33.531956Z","iopub.status.busy":"2025-05-23T16:23:33.531527Z","iopub.status.idle":"2025-05-23T16:23:33.728484Z","shell.execute_reply":"2025-05-23T16:23:33.727377Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# storage bucket where we have the data\ndata_source = \"https://storage.googleapis.com/simpeg/doc-assets/gravity.tar.gz\"\n\n# download the data\ndownloaded_data = utils.download(data_source, overwrite=True)\n\n# unzip the tarfile\ntar = tarfile.open(downloaded_data, \"r\")\ntar.extractall()\ntar.close()\n\n# path to the directory containing our data\ndir_path = downloaded_data.split(\".\")[0] + os.path.sep\n\n# files to work with\ntopo_filename = dir_path + \"gravity_topo.txt\"\ndata_filename = dir_path + \"gravity_data.obs\"","key":"F5WV2qQRko"},{"type":"output","id":"SOxINFtZw_IeqDJRQVKrO","data":[{"name":"stdout","output_type":"stream","text":"Downloading https://storage.googleapis.com/simpeg/doc-assets/gravity.tar.gz\n   saved to: /home/ssoler/git/user-tutorials/notebooks/03-gravity/gravity.tar.gz\nDownload completed!\n"},{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_971017/1191307735.py:9: DeprecationWarning: Python 3.14 will, by default, filter extracted tar archives and reject files or modify their metadata. Use the filter argument to control this behavior.\n  tar.extractall()\n"}],"key":"ARyeVr6Ig4"}],"key":"QnpsjX0ZLw"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Load Data and Plot","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rZ4uRPMHQG"}],"identifier":"load-data-and-plot","label":"Load Data and Plot","html_id":"load-data-and-plot","implicit":true,"key":"aPg7ZZ2gNN"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Here we load and plot synthetic gravity anomaly data. Topography is generally\ndefined as an (N, 3) array. Gravity data is generally defined with 4 columns:\nx, y, z and data.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ngoSsaahpA"}],"key":"aanfPYzs14"}],"key":"jqcKt6q6AF"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:33.731647Z","iopub.status.busy":"2025-05-23T16:23:33.731288Z","iopub.status.idle":"2025-05-23T16:23:34.208567Z","shell.execute_reply":"2025-05-23T16:23:34.207859Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Load topography\nxyz_topo = np.loadtxt(str(topo_filename))\n\n# Load field data\ndobs = np.loadtxt(str(data_filename))\n\n# Define receiver locations and observed data\nreceiver_locations = dobs[:, 0:3]\ndobs = dobs[:, -1]\n\n# Plot\nmpl.rcParams.update({\"font.size\": 12})\nfig = plt.figure(figsize=(7, 5))\n\nax1 = fig.add_axes([0.1, 0.1, 0.73, 0.85])\nplot2Ddata(\n    receiver_locations,\n    dobs,\n    ax=ax1,\n    contourOpts={\"cmap\": \"bwr\"},\n    shade=True,\n    nx=20,\n    ny=20,\n    dataloc=True,\n)\nax1.set_title(\"Gravity Anomaly\")\nax1.set_xlabel(\"x (m)\")\nax1.set_ylabel(\"y (m)\")\n\nax2 = fig.add_axes([0.8, 0.1, 0.03, 0.85])\nnorm = mpl.colors.Normalize(vmin=-np.max(np.abs(dobs)), vmax=np.max(np.abs(dobs)))\ncbar = mpl.colorbar.ColorbarBase(\n    ax2, norm=norm, orientation=\"vertical\", cmap=mpl.cm.bwr, format=\"%.1e\"\n)\ncbar.set_label(\"$mGal$\", rotation=270, labelpad=15, size=12)\n\nplt.show()","key":"t3887Yd8Bz"},{"type":"output","id":"_-_6S-X5OviBshQU_Ua0k","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"a4ad56474e8d1d1d073ceb69432ff15a","path":"/user-tutorials/build/a4ad56474e8d1d1d073ceb69432ff15a.png"},"text/plain":{"content":"<Figure size 700x500 with 2 Axes>","content_type":"text/plain"}}}],"key":"jPPIcTJlsy"}],"key":"Xiuhkb0FUG"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Assign Uncertainties","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VpUkhOeCJ8"}],"identifier":"assign-uncertainties","label":"Assign Uncertainties","html_id":"assign-uncertainties","implicit":true,"key":"vX7guqeb2G"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Inversion with simpeg requires that we define the standard deviation of our data.\nThis represents our estimate of the noise in our data. For a gravity inversion,\na constant floor value is generally applied to all data. For this tutorial,\nthe standard deviation on each datum will be 1% of the maximum observed\ngravity anomaly value.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"IOdFcj9tZU"}],"key":"oQLwt7mtV5"}],"key":"JfDBO8ejQB"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:34.212373Z","iopub.status.busy":"2025-05-23T16:23:34.212117Z","iopub.status.idle":"2025-05-23T16:23:34.216435Z","shell.execute_reply":"2025-05-23T16:23:34.215706Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"maximum_anomaly = np.max(np.abs(dobs))\n\nuncertainties = 0.01 * maximum_anomaly * np.ones(np.shape(dobs))","key":"WuruVnvFnZ"},{"type":"output","id":"MW12ttUgWkQbQqRA13UXt","data":[],"key":"BxZwb7vp6S"}],"key":"fld7lwzMy6"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Defining the Survey","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Oaw5SCAtVV"}],"identifier":"defining-the-survey","label":"Defining the Survey","html_id":"defining-the-survey","implicit":true,"key":"G7xaPrlPhK"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Here, we define the survey that will be used for this tutorial. Gravity\nsurveys are simple to create. The user only needs an (N, 3) array to define\nthe xyz locations of the observation locations. From this, the user can\ndefine the receivers and the source field.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"G96WvSZnKz"}],"key":"N78GJ6qlh4"}],"key":"hwVTmjmBYN"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:34.219304Z","iopub.status.busy":"2025-05-23T16:23:34.219034Z","iopub.status.idle":"2025-05-23T16:23:34.223620Z","shell.execute_reply":"2025-05-23T16:23:34.222964Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define the receivers. The data consists of vertical gravity anomaly measurements.\n# The set of receivers must be defined as a list.\nreceiver_list = gravity.receivers.Point(receiver_locations, components=\"gz\")\n\nreceiver_list = [receiver_list]\n\n# Define the source field\nsource_field = gravity.sources.SourceField(receiver_list=receiver_list)\n\n# Define the survey\nsurvey = gravity.survey.Survey(source_field)","key":"Dz3O3cGJa0"},{"type":"output","id":"Prlcj9pe4dWfDD3iHffn1","data":[],"key":"gjG9xCTgqI"}],"key":"lqGn1DLbG5"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Defining the Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oSbxD83P0V"}],"identifier":"defining-the-data","label":"Defining the Data","html_id":"defining-the-data","implicit":true,"key":"k08AFPTOEU"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here is where we define the data that is inverted. The data is defined by\nthe survey, the observation values and the standard deviation.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"yftLmrev6j"}],"key":"EdI9h2LI1d"}],"key":"fykC1eUnlp"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:34.225959Z","iopub.status.busy":"2025-05-23T16:23:34.225583Z","iopub.status.idle":"2025-05-23T16:23:34.229691Z","shell.execute_reply":"2025-05-23T16:23:34.229070Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"data_object = data.Data(survey, dobs=dobs, standard_deviation=uncertainties)","key":"ubmm8IuhIs"},{"type":"output","id":"MRE4lBxwA4wPd39N1rVVW","data":[],"key":"c2iVgypNtU"}],"key":"OOUVW2lCHU"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Defining a Tensor Mesh","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JHoFvUTD3Z"}],"identifier":"defining-a-tensor-mesh","label":"Defining a Tensor Mesh","html_id":"defining-a-tensor-mesh","implicit":true,"key":"tu13Q0OMhY"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here, we create the tensor mesh that will be used to invert gravity anomaly\ndata. If desired, we could define an OcTree mesh.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nhEriw9gFI"}],"key":"jchdzbOtuE"}],"key":"QzQKaaxLkb"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:34.232070Z","iopub.status.busy":"2025-05-23T16:23:34.231759Z","iopub.status.idle":"2025-05-23T16:23:34.237166Z","shell.execute_reply":"2025-05-23T16:23:34.236428Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"dh = 5.0\nhx = [(dh, 5, -1.3), (dh, 40), (dh, 5, 1.3)]\nhy = [(dh, 5, -1.3), (dh, 40), (dh, 5, 1.3)]\nhz = [(dh, 5, -1.3), (dh, 15)]\nmesh = TensorMesh([hx, hy, hz], \"CCN\")","key":"YBsHwvoPrx"},{"type":"output","id":"FCSest3I62OGhGusHaIos","data":[],"key":"iAWylnYWhs"}],"key":"ijcX6XMdgv"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"########################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Starting/Reference Model and Mapping on Tensor Mesh","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SgZDhfq0XS"}],"identifier":"starting-reference-model-and-mapping-on-tensor-mesh","label":"Starting/Reference Model and Mapping on Tensor Mesh","html_id":"starting-reference-model-and-mapping-on-tensor-mesh","implicit":true,"key":"wXVS1Y3RUz"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Here, we create starting and/or reference models for the inversion as\nwell as the mapping from the model space to the active cells. Starting and\nreference models can be a constant background value or contain a-priori\nstructures.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"dD3usU2MKO"}],"key":"IB6B4wNCFS"}],"key":"FRRBGC9k8y"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:34.239424Z","iopub.status.busy":"2025-05-23T16:23:34.239143Z","iopub.status.idle":"2025-05-23T16:23:34.278099Z","shell.execute_reply":"2025-05-23T16:23:34.277378Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Find the indices of the active cells in forward model (ones below surface)\nind_active = active_from_xyz(mesh, xyz_topo)\n\n# Define mapping from model to active cells\nnC = int(ind_active.sum())\nmodel_map = maps.IdentityMap(nP=nC)  # model consists of a value for each active cell\n\n# Define and plot starting model\nstarting_model = np.zeros(nC)","key":"RM3xLX1B6Z"},{"type":"output","id":"eywj6FwK5AY5vZIInF9Xh","data":[],"key":"ZXPF02OK5R"}],"key":"uEdws7toCh"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"##############################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Define the Physics and data misfit","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"frlr7xHUZX"}],"identifier":"define-the-physics-and-data-misfit","label":"Define the Physics and data misfit","html_id":"define-the-physics-and-data-misfit","implicit":true,"key":"ZALExUx53A"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here, we define the physics of the gravity problem by using the simulation\nclass.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ar1i09wANg"}],"key":"qSWigEC7OM"}],"key":"UKH6EQrR5W"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:34.280596Z","iopub.status.busy":"2025-05-23T16:23:34.280357Z","iopub.status.idle":"2025-05-23T16:23:34.328405Z","shell.execute_reply":"2025-05-23T16:23:34.327677Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"simulation = gravity.simulation.Simulation3DIntegral(\n    survey=survey, mesh=mesh, rhoMap=model_map, active_cells=ind_active\n)\n\n# Define the data misfit. Here the data misfit is the L2 norm of the weighted\n# residual between the observed data and the data predicted for a given model.\n# Within the data misfit, the residual between predicted and observed data are\n# normalized by the data's standard deviation.\ndmis = data_misfit.L2DataMisfit(data=data_object, simulation=simulation)","key":"BYuC4Vdxen"},{"type":"output","id":"jLvUwU--9pf9jSE69J25I","data":[],"key":"x57YnKzwvn"}],"key":"eS2lNJ5JJw"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Running the Depth Weighted inversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mO7KXSZaYv"}],"identifier":"running-the-depth-weighted-inversion","label":"Running the Depth Weighted inversion","html_id":"running-the-depth-weighted-inversion","implicit":true,"key":"NIZYp9f3rJ"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here we define the directives, weights, regularization, and optimization\nfor a depth-weighted inversion","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"yAWqdzgs72"}],"key":"bt9nJfv3BB"}],"key":"eJhgdqSRL7"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:34.331246Z","iopub.status.busy":"2025-05-23T16:23:34.331002Z","iopub.status.idle":"2025-05-23T16:23:55.552437Z","shell.execute_reply":"2025-05-23T16:23:55.551668Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# inversion directives\n# Defining a starting value for the trade-off parameter (beta) between the data\n# misfit and the regularization.\nstarting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1e0)\n\n# Defines the directives for the IRLS regularization. This includes setting\n# the cooling schedule for the trade-off parameter.\nupdate_IRLS = directives.UpdateIRLS(\n    f_min_change=1e-4,\n    max_irls_iterations=30,\n    irls_cooling_factor=1.5,\n    misfit_tolerance=1e-2,\n)\n\n# Options for outputting recovered models and predicted data for each beta.\nsave_iteration = directives.SaveOutputEveryIteration(save_txt=False)\n\n# Updating the preconditionner if it is model dependent.\nupdate_jacobi = directives.UpdatePreconditioner()\n\n# The directives are defined as a list\ndirectives_list = [\n    update_IRLS,\n    starting_beta,\n    save_iteration,\n    update_jacobi,\n]\n\n# Define the regularization (model objective function) with depth weighting.\nreg_dpth = regularization.Sparse(mesh, active_cells=ind_active, mapping=model_map)\nreg_dpth.norms = [0, 2, 2, 2]\ndepth_weights = utils.depth_weighting(\n    mesh, receiver_locations, active_cells=ind_active, exponent=2\n)\nreg_dpth.set_weights(depth_weights=depth_weights)\n\n# Define how the optimization problem is solved. Here we will use a projected\n# Gauss-Newton approach that employs the conjugate gradient solver.\nopt = optimization.ProjectedGNCG(\n    maxIter=100, lower=-1.0, upper=1.0, maxIterLS=20, maxIterCG=10, tolCG=1e-3\n)\n\n# Here we define the inverse problem that is to be solved\ninv_prob = inverse_problem.BaseInvProblem(dmis, reg_dpth, opt)\n\n# Here we combine the inverse problem and the set of directives\ninv = inversion.BaseInversion(inv_prob, directives_list)\n\n# Run inversion\nrecovered_model_dpth = inv.run(starting_model)","key":"ga2FEa6P9v"},{"type":"output","id":"4bx-5Z0Cd4XLMu4-nAuXr","data":[{"name":"stdout","output_type":"stream","text":"\nRunning inversion with SimPEG v0.24.0\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\n\n                    simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.\n                    ***Done using the default solver Pardiso and no solver_opts.***\n                    \n"},{"name":"stdout","output_type":"stream","text":"model has any nan: 0\n=============================== Projected GNCG ===============================\n  #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   \n-----------------------------------------------------------------------------\nx0 has any nan: 0\n   0  9.78e+02  2.66e+05  0.00e+00  2.66e+05    2.19e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   1  4.89e+02  3.19e+03  1.71e+01  1.16e+04    2.10e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   2  2.44e+02  1.21e+03  1.99e+01  6.07e+03    2.04e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   3  1.22e+02  4.61e+02  2.20e+01  3.15e+03    1.93e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"Reached starting chifact with l2-norm regularization: Start IRLS steps...\nirls_threshold 0.05928551292065909\n"},{"name":"stdout","output_type":"stream","text":"   4  1.22e+02  1.83e+02  4.61e+01  5.82e+03    2.06e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   5  1.50e+02  2.53e+02  5.92e+01  9.16e+03    2.12e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   6  8.26e+01  4.75e+02  6.48e+01  5.83e+03    2.03e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   7  1.05e+02  2.39e+02  6.72e+01  7.28e+03    2.14e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   8  6.21e+01  3.97e+02  5.96e+01  4.10e+03    2.10e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   9  8.13e+01  2.25e+02  5.22e+01  4.47e+03    2.15e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  10  9.84e+01  2.61e+02  4.39e+01  4.58e+03    2.16e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  11  6.43e+01  3.07e+02  3.79e+01  2.74e+03    2.08e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  12  9.10e+01  1.92e+02  3.32e+01  3.21e+03    2.17e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  13  1.11e+02  2.57e+02  2.73e+01  3.29e+03    2.17e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  14  7.24e+01  3.07e+02  2.30e+01  1.97e+03    2.03e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  15  9.85e+01  2.08e+02  2.14e+01  2.32e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  16  1.21e+02  2.55e+02  1.85e+01  2.49e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  17  8.00e+01  2.93e+02  1.64e+01  1.60e+03    2.04e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  18  1.06e+02  2.19e+02  1.62e+01  1.94e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  19  1.29e+02  2.60e+02  1.48e+01  2.17e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  20  1.50e+02  2.79e+02  1.36e+01  2.32e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  21  1.73e+02  2.85e+02  1.28e+01  2.50e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  22  1.99e+02  2.90e+02  1.22e+01  2.72e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  23  1.31e+02  2.98e+02  1.18e+01  1.85e+03    1.88e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  24  1.72e+02  2.25e+02  1.20e+01  2.28e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  25  2.13e+02  2.49e+02  1.15e+01  2.69e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  26  2.55e+02  2.67e+02  1.11e+01  3.09e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  27  3.01e+02  2.72e+02  1.07e+01  3.50e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  28  3.47e+02  2.85e+02  1.05e+01  3.92e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  29  3.99e+02  2.91e+02  1.02e+01  4.37e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  30  2.62e+02  3.04e+02  9.94e+00  2.90e+03    2.08e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  31  3.36e+02  2.33e+02  1.01e+01  3.62e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  32  4.08e+02  2.60e+02  9.86e+00  4.28e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  33  4.74e+02  2.81e+02  9.67e+00  4.86e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"Reach maximum number of IRLS cycles: 30\n------------------------- STOP! -------------------------\n1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 2.6622e+04\n1 : |xc-x_last| = 2.9311e-02 <= tolX*(1+|x0|) = 1.0000e-01\n0 : |proj(x-g)-x|    = 2.1837e+02 <= tolG          = 1.0000e-01\n0 : |proj(x-g)-x|    = 2.1837e+02 <= 1e3*eps       = 1.0000e-02\n0 : maxIter   =     100    <= iter          =     34\n------------------------- DONE! -------------------------\n"}],"key":"NIAxaUanLJ"}],"key":"qpJlLYhu2i"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Running the Distance Weighted inversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GLAwACkcmc"}],"identifier":"running-the-distance-weighted-inversion","label":"Running the Distance Weighted inversion","html_id":"running-the-distance-weighted-inversion","implicit":true,"key":"Mzc8kp95Sx"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here we define the directives, weights, regularization, and optimization\nfor a distance-weighted inversion","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"orcuxZHoyx"}],"key":"AGtWKwXFrA"}],"key":"Bl0S3UvFl2"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:23:55.555600Z","iopub.status.busy":"2025-05-23T16:23:55.555048Z","iopub.status.idle":"2025-05-23T16:24:22.553126Z","shell.execute_reply":"2025-05-23T16:24:22.552231Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# inversion directives\n# Defining a starting value for the trade-off parameter (beta) between the data\n# misfit and the regularization.\nstarting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1e0)\n\n# Defines the directives for the IRLS regularization. This includes setting\n# the cooling schedule for the trade-off parameter.\nupdate_IRLS = directives.UpdateIRLS(\n    f_min_change=1e-4,\n    max_irls_iterations=30,\n    irls_cooling_factor=1.5,\n    misfit_tolerance=1e-2,\n)\n\n# Options for outputting recovered models and predicted data for each beta.\nsave_iteration = directives.SaveOutputEveryIteration(save_txt=False)\n\n# Updating the preconditionner if it is model dependent.\nupdate_jacobi = directives.UpdatePreconditioner()\n\n# The directives are defined as a list\ndirectives_list = [\n    update_IRLS,\n    starting_beta,\n    save_iteration,\n    update_jacobi,\n]\n\n# Define the regularization (model objective function) with distance weighting.\nreg_dist = regularization.Sparse(mesh, active_cells=ind_active, mapping=model_map)\nreg_dist.norms = [0, 2, 2, 2]\ndistance_weights = utils.distance_weighting(\n    mesh, receiver_locations, active_cells=ind_active, exponent=2\n)\nreg_dist.set_weights(distance_weights=distance_weights)\n\n# Define how the optimization problem is solved. Here we will use a projected\n# Gauss-Newton approach that employs the conjugate gradient solver.\nopt = optimization.ProjectedGNCG(\n    maxIter=100, lower=-1.0, upper=1.0, maxIterLS=20, maxIterCG=10, tolCG=1e-3\n)\n\n# Here we define the inverse problem that is to be solved\ninv_prob = inverse_problem.BaseInvProblem(dmis, reg_dist, opt)\n\n# Here we combine the inverse problem and the set of directives\ninv = inversion.BaseInversion(inv_prob, directives_list)\n\n# Run inversion\nrecovered_model_dist = inv.run(starting_model)","key":"ynfW4j7GVt"},{"type":"output","id":"8iOvO8fnuNSS1VQQlaXJQ","data":[{"name":"stdout","output_type":"stream","text":"\nRunning inversion with SimPEG v0.24.0\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\n\n                    simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.\n                    ***Done using the default solver Pardiso and no solver_opts.***\n                    \n"},{"name":"stdout","output_type":"stream","text":"model has any nan: 0\n=============================== Projected GNCG ===============================\n  #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   \n-----------------------------------------------------------------------------\nx0 has any nan: 0\n"},{"name":"stdout","output_type":"stream","text":"   0  2.86e+03  2.66e+05  0.00e+00  2.66e+05    2.19e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   1  1.43e+03  2.35e+04  1.41e+01  4.37e+04    2.17e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   2  7.15e+02  1.05e+04  2.04e+01  2.51e+04    2.15e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   3  3.57e+02  4.24e+03  2.65e+01  1.37e+04    2.11e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   4  1.79e+02  1.62e+03  3.15e+01  7.25e+03    2.05e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   5  8.94e+01  6.17e+02  3.53e+01  3.77e+03    1.96e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"Reached starting chifact with l2-norm regularization: Start IRLS steps...\nirls_threshold 0.05584940363763429\n"},{"name":"stdout","output_type":"stream","text":"   6  8.94e+01  2.43e+02  7.45e+01  6.90e+03    2.08e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   7  5.55e+01  3.53e+02  9.54e+01  5.65e+03    2.06e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   8  7.31e+01  2.22e+02  1.13e+02  8.51e+03    2.14e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   9  4.07e+01  4.59e+02  1.08e+02  4.85e+03    2.05e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  10  5.12e+01  2.43e+02  9.71e+01  5.21e+03    2.14e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  11  3.39e+01  2.94e+02  8.14e+01  3.05e+03    2.06e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  12  4.87e+01  1.85e+02  6.95e+01  3.57e+03    2.16e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  13  6.40e+01  2.23e+02  5.90e+01  4.00e+03    2.16e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  14  7.39e+01  2.84e+02  4.90e+01  3.91e+03    2.16e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  15  4.83e+01  3.08e+02  4.11e+01  2.29e+03    2.09e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  16  6.72e+01  1.98e+02  3.76e+01  2.72e+03    2.17e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  17  8.43e+01  2.44e+02  3.26e+01  2.99e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  18  1.06e+02  2.90e+02  2.88e+01  3.34e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  19  6.65e+01  3.40e+02  2.59e+01  2.06e+03    2.14e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  20  8.47e+01  2.37e+02  2.54e+01  2.39e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  21  1.01e+02  2.66e+02  2.35e+01  2.65e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  22  6.73e+01  2.93e+02  2.22e+01  1.78e+03    2.02e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  23  9.04e+01  2.13e+02  2.21e+01  2.21e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  24  1.14e+02  2.40e+02  2.08e+01  2.62e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  25  1.39e+02  2.61e+02  1.99e+01  3.01e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  26  1.64e+02  2.72e+02  1.91e+01  3.40e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  27  1.90e+02  2.81e+02  1.85e+01  3.80e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  28  2.21e+02  2.92e+02  1.80e+01  4.27e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  29  1.44e+02  3.06e+02  1.77e+01  2.85e+03    2.03e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  30  1.87e+02  2.28e+02  1.78e+01  3.57e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  31  2.31e+02  2.53e+02  1.74e+01  4.27e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  32  2.71e+02  2.76e+02  1.70e+01  4.88e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  33  1.80e+02  2.92e+02  1.66e+01  3.27e+03    1.56e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  34  2.40e+02  2.16e+02  1.67e+01  4.22e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  35  2.94e+02  2.54e+02  1.63e+01  5.06e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"Reach maximum number of IRLS cycles: 30\n------------------------- STOP! -------------------------\n1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 2.6622e+04\n1 : |xc-x_last| = 4.0755e-02 <= tolX*(1+|x0|) = 1.0000e-01\n0 : |proj(x-g)-x|    = 2.1824e+02 <= tolG          = 1.0000e-01\n0 : |proj(x-g)-x|    = 2.1824e+02 <= 1e3*eps       = 1.0000e-02\n0 : maxIter   =     100    <= iter          =     36\n------------------------- DONE! -------------------------\n"}],"key":"oMRmnw8nHM"}],"key":"pgC8xkQ72F"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"#######################################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Running the Distance Weighted inversion","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R87heGbPWU"}],"identifier":"running-the-distance-weighted-inversion","label":"Running the Distance Weighted inversion","html_id":"running-the-distance-weighted-inversion-1","implicit":true,"key":"HpKy7xcaFl"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Here we define the directives, weights, regularization, and optimization\nfor a sensitivity weighted inversion","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"L6Bnkn5scj"}],"key":"HJzoBaXxD0"}],"key":"n218BNc2LP"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:24:22.556464Z","iopub.status.busy":"2025-05-23T16:24:22.555739Z","iopub.status.idle":"2025-05-23T16:24:46.531761Z","shell.execute_reply":"2025-05-23T16:24:46.530871Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# inversion directives\n# Defining a starting value for the trade-off parameter (beta) between the data\n# misfit and the regularization.\nstarting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1e0)\n\n# Defines the directives for the IRLS regularization. This includes setting\n# the cooling schedule for the trade-off parameter.\nupdate_IRLS = directives.UpdateIRLS(\n    f_min_change=1e-4,\n    max_irls_iterations=30,\n    irls_cooling_factor=1.5,\n    misfit_tolerance=1e-2,\n)\n\n# Options for outputting recovered models and predicted data for each beta.\nsave_iteration = directives.SaveOutputEveryIteration(save_txt=False)\n\n# Updating the preconditionner if it is model dependent.\nupdate_jacobi = directives.UpdatePreconditioner()\n\n# Add sensitivity weights\nsensitivity_weights = directives.UpdateSensitivityWeights(every_iteration=False)\n\n# The directives are defined as a list\ndirectives_list = [\n    update_IRLS,\n    sensitivity_weights,\n    starting_beta,\n    save_iteration,\n    update_jacobi,\n]\n\n# Define the regularization (model objective function) for sensitivity weighting.\nreg_sensw = regularization.Sparse(mesh, active_cells=ind_active, mapping=model_map)\nreg_sensw.norms = [0, 2, 2, 2]\n\n# Define how the optimization problem is solved. Here we will use a projected\n# Gauss-Newton approach that employs the conjugate gradient solver.\nopt = optimization.ProjectedGNCG(\n    maxIter=100, lower=-1.0, upper=1.0, maxIterLS=20, maxIterCG=10, tolCG=1e-3\n)\n\n# Here we define the inverse problem that is to be solved\ninv_prob = inverse_problem.BaseInvProblem(dmis, reg_sensw, opt)\n\n# Here we combine the inverse problem and the set of directives\ninv = inversion.BaseInversion(inv_prob, directives_list)\n\n# Run inversion\nrecovered_model_sensw = inv.run(starting_model)","key":"d4RWo0pMMP"},{"type":"output","id":"3cbnq1b0nGbwgUr3gZ7He","data":[{"name":"stdout","output_type":"stream","text":"\nRunning inversion with SimPEG v0.24.0\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\nsimpeg.InvProblem will set Regularization.reference_model to m0.\n\n                    simpeg.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.\n                    ***Done using the default solver Pardiso and no solver_opts.***\n                    \n"},{"name":"stdout","output_type":"stream","text":"model has any nan: 0\n=============================== Projected GNCG ===============================\n  #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   \n-----------------------------------------------------------------------------\nx0 has any nan: 0\n   0  3.20e+03  2.66e+05  0.00e+00  2.66e+05    2.19e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   1  1.60e+03  1.88e+04  1.15e+01  3.72e+04    2.16e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   2  8.00e+02  8.19e+03  1.61e+01  2.11e+04    2.14e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   3  4.00e+02  3.26e+03  2.03e+01  1.14e+04    2.10e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   4  2.00e+02  1.24e+03  2.38e+01  5.99e+03    2.00e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   5  1.00e+02  4.71e+02  2.64e+01  3.11e+03    1.91e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"Reached starting chifact with l2-norm regularization: Start IRLS steps...\nirls_threshold 0.05481358175866103\n"},{"name":"stdout","output_type":"stream","text":"   6  1.00e+02  1.89e+02  5.44e+01  5.63e+03    2.09e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"   7  1.19e+02  2.68e+02  6.88e+01  8.49e+03    2.14e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   8  6.87e+01  4.27e+02  7.46e+01  5.55e+03    1.86e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"   9  8.75e+01  2.37e+02  7.61e+01  6.90e+03    2.16e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  10  5.19e+01  3.97e+02  6.77e+01  3.91e+03    2.08e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  11  7.14e+01  2.04e+02  5.95e+01  4.45e+03    2.15e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  12  9.04e+01  2.40e+02  5.00e+01  4.75e+03    2.14e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  13  5.96e+01  2.99e+02  4.21e+01  2.80e+03    2.16e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  14  8.56e+01  1.86e+02  3.68e+01  3.34e+03    2.16e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  15  1.13e+02  2.20e+02  3.15e+01  3.78e+03    2.17e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  16  1.36e+02  2.63e+02  2.73e+01  3.99e+03    2.17e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  17  8.97e+01  3.01e+02  2.43e+01  2.48e+03    2.08e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  18  1.21e+02  2.11e+02  2.32e+01  3.02e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  19  1.49e+02  2.55e+02  2.12e+01  3.41e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  20  9.85e+01  2.95e+02  1.98e+01  2.24e+03    2.05e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  21  1.33e+02  2.12e+02  1.94e+01  2.79e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  22  1.65e+02  2.47e+02  1.84e+01  3.28e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  23  1.95e+02  2.75e+02  1.75e+01  3.68e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  24  2.24e+02  2.85e+02  1.68e+01  4.05e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  25  1.48e+02  2.98e+02  1.62e+01  2.70e+03    1.93e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  26  2.01e+02  2.08e+02  1.62e+01  3.47e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  27  2.52e+02  2.46e+02  1.57e+01  4.21e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  28  2.93e+02  2.80e+02  1.54e+01  4.78e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  29  1.93e+02  2.98e+02  1.50e+01  3.19e+03    1.59e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  30  2.63e+02  2.09e+02  1.50e+01  4.16e+03    2.18e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  31  3.26e+02  2.49e+02  1.46e+01  5.01e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  32  3.77e+02  2.83e+02  1.43e+01  5.67e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  33  2.45e+02  3.13e+02  1.40e+01  3.75e+03    2.02e+02      0   Skip BFGS  \n"},{"name":"stdout","output_type":"stream","text":"  34  3.25e+02  2.18e+02  1.42e+01  4.84e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"  35  3.90e+02  2.66e+02  1.39e+01  5.68e+03    2.18e+02      0              \n"},{"name":"stdout","output_type":"stream","text":"Reach maximum number of IRLS cycles: 30\n------------------------- STOP! -------------------------\n1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 2.6622e+04\n1 : |xc-x_last| = 3.4660e-02 <= tolX*(1+|x0|) = 1.0000e-01\n0 : |proj(x-g)-x|    = 2.1800e+02 <= tolG          = 1.0000e-01\n0 : |proj(x-g)-x|    = 2.1800e+02 <= 1e3*eps       = 1.0000e-02\n0 : maxIter   =     100    <= iter          =     36\n------------------------- DONE! -------------------------\n"}],"key":"zDUIhnNvL2"}],"key":"ivdQoqxoeV"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"############################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Recreate True Model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f7p4W6zfc1"}],"identifier":"recreate-true-model","label":"Recreate True Model","html_id":"recreate-true-model","implicit":true,"key":"Sup866cVvv"}],"key":"jpNfYBTd5m"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:24:46.535235Z","iopub.status.busy":"2025-05-23T16:24:46.534335Z","iopub.status.idle":"2025-05-23T16:24:46.546603Z","shell.execute_reply":"2025-05-23T16:24:46.545890Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Define density contrast values for each unit in g/cc\nbackground_density = 0.0\nblock_density = -0.2\nsphere_density = 0.2\n\n# Define model. Models in simpeg are vector arrays.\ntrue_model = background_density * np.ones(nC)\n\n# You could find the indicies of specific cells within the model and change their\n# value to add structures.\nind_block = (\n    (mesh.gridCC[ind_active, 0] > -50.0)\n    & (mesh.gridCC[ind_active, 0] < -20.0)\n    & (mesh.gridCC[ind_active, 1] > -15.0)\n    & (mesh.gridCC[ind_active, 1] < 15.0)\n    & (mesh.gridCC[ind_active, 2] > -50.0)\n    & (mesh.gridCC[ind_active, 2] < -30.0)\n)\ntrue_model[ind_block] = block_density\n\n# You can also use simpeg utilities to add structures to the model more concisely\nind_sphere = model_builder.get_indices_sphere(\n    np.r_[35.0, 0.0, -40.0], 15.0, mesh.gridCC\n)\nind_sphere = ind_sphere[ind_active]\ntrue_model[ind_sphere] = sphere_density","key":"HF3XrK098v"},{"type":"output","id":"LJQ3m8KAF3W048cP7hC0v","data":[],"key":"Nke9yd8pvo"}],"key":"EPaeggtyTJ"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"############################################################"},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Plotting True Model and Recovered Models","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hbahgbUiHC"}],"identifier":"plotting-true-model-and-recovered-models","label":"Plotting True Model and Recovered Models","html_id":"plotting-true-model-and-recovered-models","implicit":true,"key":"AUSp2z4ZeA"}],"key":"EC1cmq5lLf"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:24:46.549620Z","iopub.status.busy":"2025-05-23T16:24:46.549086Z","iopub.status.idle":"2025-05-23T16:24:47.702440Z","shell.execute_reply":"2025-05-23T16:24:47.701381Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot Models\nfig, ax = plt.subplots(2, 2, figsize=(20, 10), sharex=True, sharey=True)\nax = ax.flatten()\nplotting_map = maps.InjectActiveCells(mesh, ind_active, np.nan)\ncmap = \"coolwarm\"\nslice_y_loc = 0.0\n\nmm = mesh.plot_slice(\n    plotting_map * true_model,\n    normal=\"Y\",\n    ax=ax[0],\n    grid=False,\n    slice_loc=slice_y_loc,\n    pcolor_opts={\"cmap\": cmap, \"norm\": norm},\n)\nax[0].set_title(f\"True model slice at y = {slice_y_loc} m\")\nplt.colorbar(mm[0], label=\"$g/cm^3$\", ax=ax[0])\n\n# plot depth weighting result\nvmax = np.abs(recovered_model_dpth).max()\nnorm = mpl.colors.TwoSlopeNorm(vcenter=0, vmin=-vmax, vmax=vmax)\nmm = mesh.plot_slice(\n    plotting_map * recovered_model_dpth,\n    normal=\"Y\",\n    ax=ax[1],\n    grid=False,\n    slice_loc=slice_y_loc,\n    pcolor_opts={\"cmap\": cmap, \"norm\": norm},\n)\nax[1].set_title(f\"Depth weighting Model slice at y = {slice_y_loc} m\")\nplt.colorbar(mm[0], label=\"$g/cm^3$\", ax=ax[1])\n\n# plot distance weighting result\nvmax = np.abs(recovered_model_dist).max()\nnorm = mpl.colors.TwoSlopeNorm(vcenter=0, vmin=-vmax, vmax=vmax)\nmm = mesh.plot_slice(\n    plotting_map * recovered_model_dist,\n    normal=\"Y\",\n    ax=ax[2],\n    grid=False,\n    slice_loc=slice_y_loc,\n    pcolor_opts={\"cmap\": cmap, \"norm\": norm},\n)\nax[2].set_title(f\"Distance weighting Model slice at y = {slice_y_loc} m\")\nplt.colorbar(mm[0], label=\"$g/cm^3$\", ax=ax[2])\n\n# plot sensitivity weighting result\nvmax = np.abs(recovered_model_sensw).max()\nnorm = mpl.colors.TwoSlopeNorm(vcenter=0, vmin=-vmax, vmax=vmax)\nmm = mesh.plot_slice(\n    plotting_map * recovered_model_sensw,\n    normal=\"Y\",\n    ax=ax[3],\n    grid=False,\n    slice_loc=slice_y_loc,\n    pcolor_opts={\"cmap\": cmap, \"norm\": norm},\n)\nax[3].set_title(f\"Sensitivity weighting Model slice at y = {slice_y_loc} m\")\nplt.colorbar(mm[0], label=\"$g/cm^3$\", ax=ax[3])\n\n# shared plotting\nplotting_map = maps.InjectActiveCells(mesh, ind_active, 0.0)\nslice_y_ind = (\n    mesh.cell_centers[:, 1] == np.abs(mesh.cell_centers[:, 1] - slice_y_loc).min()\n)\nfor axx in ax:\n    utils.plot2Ddata(\n        mesh.cell_centers[slice_y_ind][:, [0, 2]],\n        (plotting_map * true_model)[slice_y_ind],\n        contourOpts={\"alpha\": 0},\n        level=True,\n        ncontour=2,\n        levelOpts={\"colors\": \"grey\", \"linewidths\": 2, \"linestyles\": \"--\"},\n        method=\"nearest\",\n        ax=axx,\n    )\n    axx.set_aspect(1)\n\nplt.tight_layout()","key":"TUw9zCEGyp"},{"type":"output","id":"wrYixxRPfpX7yY5IifEuq","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"30e1f355fee1b48bd29d902558b42646","path":"/user-tutorials/build/30e1f355fee1b48bd29d902558b42646.png"},"text/plain":{"content":"<Figure size 2000x1000 with 8 Axes>","content_type":"text/plain"}}}],"key":"tTReXjmZ3w"}],"key":"FJTGRkYUQA"},{"type":"block","kind":"notebook-content","data":{"cell_marker":"############################################################","lines_to_next_cell":0},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Visualize weights","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vSai4WbVoD"}],"identifier":"visualize-weights","label":"Visualize weights","html_id":"visualize-weights","implicit":true,"key":"E9LGQfDwMA"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Plot Weights","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"dwZBbEns4j"}],"key":"HH4fKvWUy3"}],"key":"J5HceA0cwh"},{"type":"block","kind":"notebook-code","data":{"execution":{"iopub.execute_input":"2025-05-23T16:24:47.706227Z","iopub.status.busy":"2025-05-23T16:24:47.705989Z","iopub.status.idle":"2025-05-23T16:24:48.326628Z","shell.execute_reply":"2025-05-23T16:24:48.325461Z"}},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(1, 3, figsize=(20, 4), sharex=True, sharey=True)\nplotting_map = maps.InjectActiveCells(mesh, ind_active, np.nan)\ncmap = \"magma\"\nslice_y_loc = 0.0\n\n# plot depth weights\nmm = mesh.plot_slice(\n    plotting_map * np.log10(depth_weights),\n    normal=\"Y\",\n    ax=ax[0],\n    grid=False,\n    slice_loc=slice_y_loc,\n    pcolor_opts={\"cmap\": cmap},\n)\nax[0].set_title(f\"log10(depth weights) slice at y = {slice_y_loc} m\")\nplt.colorbar(mm[0], label=\"log10(depth weights)\", ax=ax[0])\n\n# plot distance weights\nmm = mesh.plot_slice(\n    plotting_map * np.log10(distance_weights),\n    normal=\"Y\",\n    ax=ax[1],\n    grid=False,\n    slice_loc=slice_y_loc,\n    pcolor_opts={\"cmap\": cmap},\n)\nax[1].set_title(f\"log10(distance weights) slice at y = {slice_y_loc} m\")\nplt.colorbar(mm[0], label=\"log10(distance weights)\", ax=ax[1])\n\n# plot sensitivity weights\nmm = mesh.plot_slice(\n    plotting_map * np.log10(reg_sensw.objfcts[0].get_weights(key=\"sensitivity\")),\n    normal=\"Y\",\n    ax=ax[2],\n    grid=False,\n    slice_loc=slice_y_loc,\n    pcolor_opts={\"cmap\": cmap},\n)\nax[2].set_title(f\"log10(sensitivity weights) slice at y = {slice_y_loc} m\")\nplt.colorbar(mm[0], label=\"log10(sensitivity weights)\", ax=ax[2])\n\n# shared plotting\nfor axx in ax:\n    axx.set_aspect(1)\n\nplt.tight_layout()","key":"tox9FtWxEe"},{"type":"output","id":"kPNwnlDv6oL8allcZThJD","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"4468057a1aa02f8ecd9a8a8d999f98b7","path":"/user-tutorials/build/4468057a1aa02f8ecd9a8a8d999f98b7.png"},"text/plain":{"content":"<Figure size 2000x400 with 6 Axes>","content_type":"text/plain"}}}],"key":"JTzgOPYvW6"}],"key":"BKXG3Xbwmc"}],"key":"erdeyddzgj"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"3D Inversion of Gravity Anomaly Data","url":"/inv-gravity-anomaly-3d","group":"SimPEG User Tutorials"},"next":{"title":"Magnetics","url":"/magnetics-index","group":"SimPEG User Tutorials"}}},"domain":"http://localhost:3000"}